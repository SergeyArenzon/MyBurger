{"ast":null,"code":"// import * as actionTypes from \"./actionTypes\";\n// import axios from \"axios\";\n// export const authStart = () => {\n//     return {\n//         type: actionTypes.AUTH_START,\n//     };\n// };\n// export const authSuccess = (idToken, userId) => {\n//     return {\n//         type: actionTypes.AUTH_SUCCESS,\n//         token: idToken,\n//         userId: userId,\n//     };\n// };\n// export const authFail = (error) => {\n//     return {\n//         type: actionTypes.AUTH_FAIL,\n//         error: error,\n//     };\n// };\n// export const logout = () => {\n//     return {\n//         type: actionTypes.AUTH_LOGOUT,\n//     };\n// };\n// export const checkAuthTimeout = (expirationTime) => {\n//     return (dispatch) => {\n//         setTimeout(() => {\n//             dispatch(logout());\n//         }, expirationTime * 1000);\n//     };\n// };\n// export const auth = (email, password, isSignup) => {\n//     return (dispatch) => {\n//         dispatch(authStart());\n//         const authData = {\n//             email: email,\n//             password: password,\n//             returnSecureToken: true,\n//         };\n//         let url =\n//             \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         if (!isSignup) {\n//             url =\n//                 \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         }\n//         axios\n//             .post(url, authData)\n//             .then((response) => {\n//                 console.log(response);\n//                 dispatch(\n//                     authSuccess(response.data.idToken, response.data.localId)\n//                 );\n//                 dispatch(checkAuthTimeout(response.data.expiresIn));\n//             })\n//             .catch((err) => {\n//                 console.log(err.response);\n//                 dispatch(authFail(err.response));\n//             });\n//     };\n// };\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport { returnErrors } from \"./error\";\nexport var register = {\n  name: name,\n  email: email,\n  password: password\n}; // Check token & load user\n\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    // User loading\n    dispatch({\n      type: actionTypes.USER_LOADING\n    });\n    axios.get(\"http://localhost:5000/auth/user\", tokenConfig).then(function (res) {\n      dispatch({\n        type: actionTypes.USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionTypes.AUTH_ERROR\n      });\n    });\n  };\n}; // Setup config/headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // Get token from loaclStorage\n  var token = getState().auth.token; // Header\n\n  var config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/sergey/Dev/Web/myburger/src/store/actions/auth.js"],"names":["actionTypes","axios","returnErrors","register","name","email","password","loadUser","dispatch","getState","type","USER_LOADING","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","response","status","AUTH_ERROR","token","auth","config","headers"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,SAA7B;AAIA,OAAO,IAAMC,QAAQ,GAAI;AAACC,EAAAA,IAAI,EAAJA,IAAD;AAAOC,EAAAA,KAAK,EAALA,KAAP;AAAcC,EAAAA,QAAQ,EAARA;AAAd,CAAlB,C,CAGP;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAClD;AACAD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEV,WAAW,CAACW;AAApB,KAAD,CAAR;AAEAV,IAAAA,KAAK,CACAW,GADL,CACS,iCADT,EAC4CC,WAD5C,EAEKC,IAFL,CAEU,UAACC,GAAD,EAAS;AACXP,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEV,WAAW,CAACgB,WADb;AAELC,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFR,OAAD,CAAR;AAIH,KAPL,EAQKC,KARL,CAQW,UAACC,GAAD,EAAS;AACZZ,MAAAA,QAAQ,CAACN,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAd,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEV,WAAW,CAACuB;AAApB,OAAD,CAAR;AACH,KAXL;AAYH,GAhBuB;AAAA,CAAjB,C,CAkBP;;AAEA,OAAO,IAAMV,WAAW,GAAG,SAAdA,WAAc,CAACJ,QAAD,EAAc;AACrC;AACA,MAAMe,KAAK,GAAGf,QAAQ,GAAGgB,IAAX,CAAgBD,KAA9B,CAFqC,CAIrC;;AAEA,MAAME,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;;AAKA,MAAIH,KAAJ,EAAW;AACPE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AACD,SAAOE,MAAP;AACH,CAfM","sourcesContent":["// import * as actionTypes from \"./actionTypes\";\n// import axios from \"axios\";\n\n// export const authStart = () => {\n//     return {\n//         type: actionTypes.AUTH_START,\n//     };\n// };\n\n// export const authSuccess = (idToken, userId) => {\n//     return {\n//         type: actionTypes.AUTH_SUCCESS,\n//         token: idToken,\n//         userId: userId,\n//     };\n// };\n\n// export const authFail = (error) => {\n//     return {\n//         type: actionTypes.AUTH_FAIL,\n//         error: error,\n//     };\n// };\n\n// export const logout = () => {\n//     return {\n//         type: actionTypes.AUTH_LOGOUT,\n//     };\n// };\n\n// export const checkAuthTimeout = (expirationTime) => {\n//     return (dispatch) => {\n//         setTimeout(() => {\n//             dispatch(logout());\n//         }, expirationTime * 1000);\n//     };\n// };\n\n// export const auth = (email, password, isSignup) => {\n//     return (dispatch) => {\n//         dispatch(authStart());\n//         const authData = {\n//             email: email,\n//             password: password,\n//             returnSecureToken: true,\n//         };\n//         let url =\n//             \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         if (!isSignup) {\n//             url =\n//                 \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         }\n//         axios\n//             .post(url, authData)\n//             .then((response) => {\n//                 console.log(response);\n//                 dispatch(\n//                     authSuccess(response.data.idToken, response.data.localId)\n//                 );\n//                 dispatch(checkAuthTimeout(response.data.expiresIn));\n//             })\n//             .catch((err) => {\n//                 console.log(err.response);\n//                 dispatch(authFail(err.response));\n//             });\n//     };\n// };\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport { returnErrors } from \"./error\";\n\n\n\nexport const register = ({name, email, password})\n\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: actionTypes.USER_LOADING });\n\n    axios\n        .get(\"http://localhost:5000/auth/user\", tokenConfig)\n        .then((res) => {\n            dispatch({\n                type: actionTypes.USER_LOADED,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({ type: actionTypes.AUTH_ERROR });\n        });\n};\n\n// Setup config/headers and token\n\nexport const tokenConfig = (getState) => {\n    // Get token from loaclStorage\n    const token = getState().auth.token;\n\n    // Header\n\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\",\n        },\n    };\n    if (token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n    return config;\n};\n"]},"metadata":{},"sourceType":"module"}