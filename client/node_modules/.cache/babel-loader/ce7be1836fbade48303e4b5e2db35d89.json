{"ast":null,"code":"import _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Checkout/ContactData/ContactData.js\";\n\nimport React, { useState } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport Authentication from \"../../Auth/Auth\";\nimport { Redirect } from 'react-router-dom';\n\nvar contactData = function contactData(props) {\n  var _useState = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Your Name\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Street\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"ZIP Code\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Country\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Your Email\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: \"select\",\n      elementConfig: {\n        options: [{\n          value: \"fastest\",\n          displayValue: \"Fastest\"\n        }, {\n          value: \"cheapest\",\n          displayValue: \"Cheapest\"\n        }],\n        placeholder: \"ZIP Code\"\n      },\n      validation: {\n        required: false\n      },\n      value: \"fastest\",\n      valid: true,\n      touched: false\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderForm = _useState2[0],\n      setOrderForm = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formIsValid = _useState4[0],\n      setFormIsValid = _useState4[1];\n\n  var orderHandler = function orderHandler(event) {\n    event.preventDefault();\n    var formData = {};\n\n    for (var formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    var ingredients = props.ings;\n    var price = props.price; //   push new order\n\n    var order = {\n      userId: props.auth.user._id,\n      ingredients: ingredients,\n      price: price.toFixed(2),\n      orderData: formData\n    };\n    console.log(order);\n    props.onOrderBurger(order); // props.history.push(\"/\");\n  };\n\n  var checkVaildity = function checkVaildity(value, rules) {\n    var isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    console.log(value);\n    return isValid;\n  };\n\n  var inputChangedHandle = function inputChangedHandle(event, inputIdentifier) {\n    var updatedOrderForm = _objectSpread({}, orderForm);\n\n    var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkVaildity(updatedFormElement.value, updatedFormElement.validation);\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    updatedFormElement.touched = true;\n    var formIsValid = true;\n\n    for (var key in updatedOrderForm) {\n      formIsValid = updatedOrderForm[key].valid && formIsValid;\n    }\n\n    console.log(updatedFormElement);\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n  var formElementsArray = [];\n\n  for (var key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  var form = null;\n\n  if (props.loading) {\n    console.log(\"---------------spinner-------------------\");\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 12\n      }\n    });\n  } else if (!props.auth.isAuthenticated) {\n    // form = <Authentication />;\n    props.history.push(\"/checkout/contact-data\");\n    form = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/auth\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 12\n      }\n    });\n  } else {\n    form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: orderHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }\n    }, formElementsArray.map(function (formElement) {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.value,\n        invalid: !formElement.config.valid,\n        changed: function changed(event) {\n          return inputChangedHandle(event, formElement.id);\n        },\n        touched: formElement.config.touched,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }\n      });\n    }), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !formIsValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, \"ORDER\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 10\n    }\n  }, form);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(contactData);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","useState","Button","classes","Spinner","Input","connect","actions","Authentication","Redirect","contactData","props","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","ingredients","ings","price","order","userId","auth","user","_id","toFixed","orderData","console","log","onOrderBurger","checkVaildity","rules","isValid","trim","length","inputChangedHandle","inputIdentifier","updatedOrderForm","updatedFormElement","target","key","formElementsArray","push","id","config","form","loading","isAuthenticated","history","map","formElement","ContactData","mapStateToProps","state","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport Authentication from \"../../Auth/Auth\";\nimport {Redirect} from 'react-router-dom';\n\n\nconst contactData = (props) => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Your Name\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    street: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Street\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    zipCode: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"ZIP Code\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n      },\n      valid: false,\n      touched: false,\n    },\n    country: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Country\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Your Email\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    deliveryMethod: {\n      elementType: \"select\",\n      elementConfig: {\n        options: [\n          { value: \"fastest\", displayValue: \"Fastest\" },\n          { value: \"cheapest\", displayValue: \"Cheapest\" },\n        ],\n        placeholder: \"ZIP Code\",\n      },\n      validation: { required: false },\n      value: \"fastest\",\n      valid: true,\n      touched: false,\n    },\n  });\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    const ingredients = props.ings;\n    const price = props.price;\n\n    //   push new order\n\n    const order = {\n      userId: props.auth.user._id,\n      ingredients: ingredients,\n      price: price.toFixed(2),\n      orderData: formData,\n    };\n\n    console.log(order);\n    props.onOrderBurger(order);\n    // props.history.push(\"/\");\n  };\n\n  const checkVaildity = (value, rules) => {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    console.log(value);\n    return isValid;\n  };\n\n  const inputChangedHandle = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...orderForm,\n    };\n\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier],\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkVaildity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    updatedFormElement.touched = true;\n\n    let formIsValid = true;\n\n    for (let key in updatedOrderForm) {\n      formIsValid = updatedOrderForm[key].valid && formIsValid;\n    }\n\n    console.log(updatedFormElement);\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n  const formElementsArray = [];\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key],\n    });\n  }\n  let form = null;\n\n  if (props.loading) {\n    console.log(\"---------------spinner-------------------\");\n    form = <Spinner />;\n  } else if (!props.auth.isAuthenticated) {\n    // form = <Authentication />;\n    props.history.push(\"/checkout/contact-data\");\n    form = <Redirect to={\"/auth\"}/>\n  \n          \n  } else {\n    form = (\n      <form onSubmit={orderHandler}>\n        {formElementsArray.map((formElement) => {\n          return (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.value}\n              invalid={!formElement.config.valid}\n              changed={(event) =>\n                inputChangedHandle(event, formElement.id)\n              }\n              touched={formElement.config.touched}\n            />\n          );\n        })}\n\n        <Button btnType=\"Success\" disabled={!formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n  }\n\n\n  return <div className={classes.ContactData}>{form}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    auth: state.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(contactData);\n"]},"metadata":{},"sourceType":"module"}