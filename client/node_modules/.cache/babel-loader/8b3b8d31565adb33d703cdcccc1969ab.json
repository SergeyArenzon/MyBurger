{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar CommandOperation = require('./command');\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar loadCollection = require('../dynamic_loaders').loadCollection;\n\nvar MongoError = require('../core').MongoError;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'strict', 'serializeFunctions', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern']);\n\nvar CreateCollectionOperation = /*#__PURE__*/function (_CommandOperation) {\n  _inherits(CreateCollectionOperation, _CommandOperation);\n\n  function CreateCollectionOperation(db, name, options) {\n    var _this;\n\n    _classCallCheck(this, CreateCollectionOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateCollectionOperation).call(this, db, options));\n    _this.name = name;\n    return _this;\n  }\n\n  _createClass(CreateCollectionOperation, [{\n    key: \"_buildCommand\",\n    value: function _buildCommand() {\n      var name = this.name;\n      var options = this.options;\n      var cmd = {\n        create: name\n      };\n\n      for (var n in options) {\n        if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n          cmd[n] = options[n];\n        }\n      }\n\n      return cmd;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var _this2 = this;\n\n      var db = this.db;\n      var name = this.name;\n      var options = this.options;\n      var Collection = loadCollection();\n      var listCollectionOptions = Object.assign({\n        nameOnly: true,\n        strict: false\n      }, options);\n      listCollectionOptions = applyWriteConcern(listCollectionOptions, {\n        db: db\n      }, listCollectionOptions);\n\n      function done(err) {\n        if (err) {\n          return callback(err);\n        }\n\n        try {\n          callback(null, new Collection(db, db.s.topology, db.databaseName, name, db.s.pkFactory, options));\n        } catch (err) {\n          callback(err);\n        }\n      }\n\n      var strictMode = listCollectionOptions.strict;\n\n      if (strictMode) {\n        db.listCollections({\n          name: name\n        }, listCollectionOptions).setReadPreference(ReadPreference.PRIMARY).toArray(function (err, collections) {\n          if (err) {\n            return callback(err);\n          }\n\n          if (collections.length > 0) {\n            return callback(new MongoError(\"Collection \".concat(name, \" already exists. Currently in strict mode.\")));\n          }\n\n          _get(_getPrototypeOf(CreateCollectionOperation.prototype), \"execute\", _this2).call(_this2, done);\n        });\n        return;\n      } // otherwise just execute the command\n\n\n      _get(_getPrototypeOf(CreateCollectionOperation.prototype), \"execute\", this).call(this, done);\n    }\n  }]);\n\n  return CreateCollectionOperation;\n}(CommandOperation);\n\ndefineAspects(CreateCollectionOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateCollectionOperation;","map":null,"metadata":{},"sourceType":"script"}