{"ast":null,"code":"import _objectSpread from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sergey/Dev/Web/myburger/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"axios\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport Authentication from \"../../Auth/Auth\";\n\nvar ContactData = /*#__PURE__*/function (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }],\n            placeholder: \"ZIP Code\"\n          },\n          validation: {\n            required: false\n          },\n          value: \"fastest\",\n          valid: true,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var ingredients = _this.props.ings;\n      var price = _this.props.price; //   push new order\n\n      var order = {\n        userId: _this.props.auth.user._id,\n        ingredients: ingredients,\n        price: price.toFixed(2),\n        orderData: formData\n      };\n      console.log(order);\n\n      _this.props.onOrderBurger(order); // this.props.history.push(\"/\");\n\n    };\n\n    _this.checkVaildity = function (value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      console.log(value);\n      return isValid;\n    };\n\n    _this.inputChangedHandle = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkVaildity(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      updatedFormElement.touched = true;\n      var formIsValid = true;\n\n      for (var key in updatedOrderForm) {\n        formIsValid = updatedOrderForm[key].valid && formIsValid;\n      }\n\n      console.log(updatedFormElement);\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"[ContactData componentDidMount]\");\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(\"[ContactData componentDidUpdate]\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = null;\n\n      if (this.props.loading) {\n        console.log('---------------spinner-------------------');\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 20\n          }\n        });\n      } else if (!this.props.auth.isAuthenticated) {\n        form = /*#__PURE__*/React.createElement(Authentication, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 20\n          }\n        });\n      } else {\n        form = /*#__PURE__*/React.createElement(\"form\", {\n          onSubmit: this.orderHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }\n        }, formElementsArray.map(function (formElement) {\n          return /*#__PURE__*/React.createElement(Input, {\n            key: formElement.id,\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.value,\n            invalid: !formElement.config.valid,\n            changed: function changed(event) {\n              return _this2.inputChangedHandle(event, formElement.id);\n            },\n            touched: formElement.config.touched,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }\n          });\n        }), /*#__PURE__*/React.createElement(Button, {\n          btnType: \"Success\",\n          disabled: !this.state.formIsValid,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }\n        }, \"ORDER\"));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.ContactData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 16\n        }\n      }, form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","map":{"version":3,"sources":["/home/sergey/Dev/Web/myburger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","actions","Authentication","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","ingredients","props","ings","price","order","userId","auth","user","_id","toFixed","orderData","console","log","onOrderBurger","checkVaildity","rules","isValid","trim","length","inputChangedHandle","inputIdentifier","updatedOrderForm","updatedFormElement","target","key","setState","formElementsArray","push","id","config","form","loading","isAuthenticated","map","formElement","mapStateToProps","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"axios\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport Authentication from \"../../Auth/Auth\";\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Name\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Street\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            zipCode: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"ZIP Code\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Country\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Your Email\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            deliveryMethod: {\n                elementType: \"select\",\n                elementConfig: {\n                    options: [\n                        { value: \"fastest\", displayValue: \"Fastest\" },\n                        { value: \"cheapest\", displayValue: \"Cheapest\" },\n                    ],\n                    placeholder: \"ZIP Code\",\n                },\n                validation: { required: false },\n                value: \"fastest\",\n                valid: true,\n                touched: false,\n            },\n        },\n        formIsValid: false,\n    };\n    componentDidMount() {\n        console.log(\"[ContactData componentDidMount]\");\n    }\n    componentDidUpdate() {\n        console.log(\"[ContactData componentDidUpdate]\");\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[\n                formElementIdentifier\n            ].value;\n        }\n\n        const ingredients = this.props.ings;\n        const price = this.props.price;\n\n        //   push new order\n\n        const order = {\n            userId: this.props.auth.user._id,\n            ingredients: ingredients,\n            price: price.toFixed(2),\n            orderData: formData,\n        };\n\n        console.log(order);\n        this.props.onOrderBurger(order);\n        // this.props.history.push(\"/\");\n    };\n\n    checkVaildity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        console.log(value);\n        return isValid;\n    };\n\n    inputChangedHandle = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm,\n        };\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier],\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkVaildity(\n            updatedFormElement.value,\n            updatedFormElement.validation\n        );\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        updatedFormElement.touched = true;\n\n        let formIsValid = true;\n\n        for (let key in updatedOrderForm) {\n            formIsValid = updatedOrderForm[key].valid && formIsValid;\n        }\n\n        console.log(updatedFormElement);\n\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid,\n        });\n    };\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            });\n        }\n        let form = null;\n\n        if (this.props.loading) {\n            console.log('---------------spinner-------------------')\n            form = <Spinner />;\n        } else if (!this.props.auth.isAuthenticated) {\n            form = <Authentication />;\n        } else {\n            form = (\n                <form onSubmit={this.orderHandler}>\n                    {formElementsArray.map((formElement) => {\n                        return (\n                            <Input\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.value}\n                                invalid={!formElement.config.valid}\n                                changed={(event) =>\n                                    this.inputChangedHandle(\n                                        event,\n                                        formElement.id\n                                    )\n                                }\n                                touched={formElement.config.touched}\n                            />\n                        );\n                    })}\n\n                    <Button\n                        btnType=\"Success\"\n                        disabled={!this.state.formIsValid}\n                    >\n                        ORDER\n                    </Button>\n                </form>\n            );\n        }\n\n        return <div className={classes.ContactData}>{form}</div>;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        auth: state.auth,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onOrderBurger: (orderData) =>\n            dispatch(actions.purchaseBurger(orderData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);\n"]},"metadata":{},"sourceType":"module"}