{"ast":null,"code":"import _objectSpread from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sergey/Dev/Web/myburger/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"axios\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\n\nvar ContactData = /*#__PURE__*/function (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        countery: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }],\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      loading: false,\n      formIsValid: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var ingredients = _this.props.ingredients;\n      var price = _this.props.price; //   push new order\n\n      var order = {\n        ingredients: ingredients,\n        price: price,\n        orderData: formData\n      };\n      console.log(order);\n      axios.post(\"http://localhost:5000/orders/add\", order).then(function (response) {\n        _this.setState({\n          loading: false,\n          purchasing: false\n        });\n\n        _this.props.history.push(\"/\");\n      }).catch(function (error) {\n        _this.setState({\n          loading: false,\n          purchasing: false\n        });\n\n        console.log(error);\n      });\n    };\n\n    _this.checkVaildity = function (value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    };\n\n    _this.inputChangedHandle = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkVaildity(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      updatedFormElement.touched = true;\n      console.log(updatedFormElement);\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"[ContactData componentDidMount]\");\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(\"[ContactData componentDidUpdate]\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, formElementsArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.value,\n          invalid: !formElement.config.valid,\n          changed: function changed(event) {\n            return _this2.inputChangedHandle(event, formElement.id);\n          },\n          touched: formElement.config.touched,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }\n      }, \"ORDER\"));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.ContactData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 16\n        }\n      }, form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nexport default ContactData;","map":{"version":3,"sources":["/home/sergey/Dev/Web/myburger/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","countery","email","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","ingredients","props","price","order","orderData","console","log","post","then","response","purchasing","history","push","catch","error","checkVaildity","rules","isValid","trim","length","inputChangedHandle","inputIdentifier","updatedOrderForm","updatedFormElement","target","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"axios\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Name\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Street\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"ZIP Code\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                },\n                valid: false,\n                touched: false\n            },\n            countery: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Country\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Your Email\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: \"select\",\n                elementConfig: {\n                    options: [\n                        { value: \"fastest\", displayValue: \"Fastest\" },\n                        { value: \"cheapest\", displayValue: \"Cheapest\" },\n                    ],\n                    placeholder: \"ZIP Code\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        loading: false,\n        formIsValid: false\n    };\n    componentDidMount() {\n        console.log(\"[ContactData componentDidMount]\");\n    }\n    componentDidUpdate() {\n        console.log(\"[ContactData componentDidUpdate]\");\n    }\n\n\n    \n    orderHandler = (event) => {\n        event.preventDefault();\n        this.setState({ loading: true });\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[\n                formElementIdentifier\n            ].value;\n        }\n\n        const ingredients = this.props.ingredients;\n        const price = this.props.price;\n\n        //   push new order\n\n        const order = {\n            ingredients: ingredients,\n            price: price,\n            orderData: formData,\n        };\n\n        console.log(order);\n\n        axios\n            .post(\"http://localhost:5000/orders/add\", order)\n            .then((response) => {\n                this.setState({ loading: false, purchasing: false });\n                this.props.history.push(\"/\");\n            })\n            .catch((error) => {\n                this.setState({ loading: false, purchasing: false });\n                console.log(error);\n            });\n    };\n\n    checkVaildity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        return isValid;\n    };\n\n    inputChangedHandle = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm,\n        };\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier],\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkVaildity(\n            updatedFormElement.value,\n            updatedFormElement.validation\n        );\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        updatedFormElement.touched = true;\n        console.log(updatedFormElement )\n        this.setState({ orderForm: updatedOrderForm });\n    };\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map((formElement) => {\n                    return (\n                        <Input\n                            key={formElement.id}\n                            elementType={formElement.config.elementType}\n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.value}\n                            invalid={!formElement.config.valid}\n                            changed={(event) =>\n                                this.inputChangedHandle(event, formElement.id)\n                            }\n                            touched={formElement.config.touched}\n                        />\n                    );\n                })}\n                <Button btnType=\"Success\">ORDER</Button>\n            </form>\n        );\n\n        return <div className={classes.ContactData}>{form}</div>;\n    }\n}\n\nexport default ContactData;\n"]},"metadata":{},"sourceType":"module"}