{"ast":null,"code":"import _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Orders/Orders.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Order from \"../../components/Order/Order\";\nimport classes from \"./Orders.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/order\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Auth from \"../Auth/Auth\";\n\nvar orders = function orders(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      foldListener = _useState2[0],\n      setFoldListener = _useState2[1];\n\n  useEffect(function () {\n    console.log(\"Orders[]\");\n\n    if (props.auth.isAuthenticated) {\n      var orderListener = [];\n\n      for (var i = 0; i < props.orders.length; i++) {\n        orderListener.push({\n          orderId: props.orders[i]._id,\n          isExpend: false\n        });\n      }\n\n      setFoldListener(orderListener);\n    }\n  }, []);\n\n  var foldListenerHandler = function foldListenerHandler(id, state) {\n    if (!state) {\n      var orderListener = [];\n\n      for (var i = 0; i < props.orders.length; i++) {\n        orderListener.push({\n          orderId: props.orders[i]._id,\n          isExpend: false\n        });\n      }\n\n      orderListener['orderId'] = true;\n      setFoldListener();\n    }\n  };\n\n  var orders = /*#__PURE__*/React.createElement(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 18\n    }\n  });\n\n  if (props.auth.isAuthenticated) {\n    if (!props.loading) {\n      orders = /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.Orders,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }\n      }, props.orders.map(function (order) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: order._id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Order, {\n          ingredients: order.ingredients,\n          address: order.address,\n          name: order.orderData.name,\n          email: order.email,\n          price: order.price,\n          createdAt: order.createdAt,\n          orderId: order._id,\n          foldListener: foldListener,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 37\n          }\n        }));\n      })));\n    }\n  } else {\n    orders = /*#__PURE__*/React.createElement(Auth, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }\n  }, orders);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchOrders: function onFetchOrders() {\n      return dispatch(actions.fetchOrders());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(orders);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Orders/Orders.js"],"names":["React","useEffect","useState","Order","classes","connect","actions","Spinner","Auth","orders","props","foldListener","setFoldListener","console","log","auth","isAuthenticated","orderListener","i","length","push","orderId","_id","isExpend","foldListenerHandler","id","state","loading","Orders","map","order","ingredients","address","orderData","name","email","price","createdAt","mapStateToProps","mapDispatchToProps","dispatch","onFetchOrders","fetchOrders"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Order from \"../../components/Order/Order\";\nimport classes from \"./Orders.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/order\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Auth from \"../Auth/Auth\";\n\nconst orders = (props) => {\n    const [foldListener, setFoldListener] = useState(null);\n\n    useEffect(() => {\n        console.log(\"Orders[]\");\n        if (props.auth.isAuthenticated) {\n            let orderListener = [];\n            for (let i = 0; i < props.orders.length; i++) {\n                orderListener.push({\n                    orderId: props.orders[i]._id,\n                    isExpend: false,\n                });\n            }\n            setFoldListener(orderListener);\n        }\n    }, []);\n\n    const foldListenerHandler = (id, state) => {\n        if (!state) {\n            let orderListener = [];\n            for (let i = 0; i < props.orders.length; i++) {\n                orderListener.push({\n                    orderId: props.orders[i]._id,\n                    isExpend: false,\n                });\n            }\n\n            orderListener['orderId'] = true;\n            setFoldListener()\n        } \n\n    }\n    let orders = <Spinner />;\n    if (props.auth.isAuthenticated) {\n        if (!props.loading) {\n            orders = (\n                <div className={classes.Orders}>\n                    <ul>\n                        {props.orders.map((order) => {\n                            return (\n                                <li key={order._id}>\n                                    <Order\n                                        ingredients={order.ingredients}\n                                        address={order.address}\n                                        name={order.orderData.name}\n                                        email={order.email}\n                                        price={order.price}\n                                        createdAt={order.createdAt}\n                                        orderId= {order._id}\n                                        foldListener={foldListener}\n                                    />\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            );\n        }\n    } else {\n        orders = <Auth />;\n    }\n    return <div>{orders}</div>;\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        auth: state.auth,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchOrders: () => dispatch(actions.fetchOrders()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(orders);\n"]},"metadata":{},"sourceType":"module"}