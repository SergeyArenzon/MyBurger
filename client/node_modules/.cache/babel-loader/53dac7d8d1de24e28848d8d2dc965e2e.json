{"ast":null,"code":"import _defineProperty from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nvar Auth = /*#__PURE__*/function (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      signupMode: false,\n      error: \"\",\n      controls: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Full Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 1\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    _this.checkVaildity = function (value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updatedControls = _objectSpread({}, controls, _defineProperty({}, controlName, _objectSpread({}, controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkVaildity(event.target.value, controls[controlName].validation),\n        touched: true\n      }))); // console.log(controls.password)\n\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      if (signupMode) {\n        var registrationInfo = {\n          name: controls.name.value,\n          email: controls.email.value,\n          password: controls.password.value\n        };\n        props.onRegisterSubmit(registrationInfo);\n      } else if (!signupMode) {\n        var loginInfo = {\n          email: controls.email.value,\n          password: controls.password.value\n        };\n        props.onLoginSubmit(loginInfo);\n      }\n    };\n\n    _this.switchAuthModeHandler = function () {\n      _this.setState(function (prevState) {\n        return {\n          signupMode: !prevState.signupMode\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Check if Logout pressed\n      // if (props.isAuthenticated) {\n      // props.onLogoutSubmit();\n      // }\n      console.log(\"componentDidMount[Orders]\");\n      props.onLogoutSubmit();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log(\"componentDidUpdate[Orders]\");\n\n      if (prevProps.error !== props.error) {\n        if (props.error.id === \"REGISTER_FAIL\") {\n          this.setState({\n            error: props.error\n          });\n        } else {\n          this.setState({\n            error: null\n          });\n        }\n      }\n\n      if (prevProps.error !== props.error) {\n        if (props.error.id === \"LOGIN_FAIL\") {\n          this.setState({\n            error: props.error\n          });\n        } else {\n          this.setState({\n            error: null\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in controls) {\n        formElementsArray.push({\n          id: key,\n          config: controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        if (signupMode || !(formElement.id === \"name\")) {\n          return /*#__PURE__*/React.createElement(Input, {\n            key: formElement.id,\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            invalid: !formElement.config.valid,\n            shouldValidate: formElement.config.validation,\n            touched: formElement.config.touched,\n            changed: function changed(event) {\n              return _this2.inputChangedHandler(event, formElement.id);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 11\n            }\n          });\n        }\n\n        return null;\n      });\n\n      if (props.isLoading) {\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 14\n          }\n        });\n      }\n\n      var errorMessage = null;\n\n      if (error) {\n        errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 22\n          }\n        }, error.msg.msg);\n      }\n\n      var redirectTo = /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 22\n        }\n      });\n\n      if (!props.isAuthenticated) {\n        redirectTo = null;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.Auth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }\n      }, redirectTo, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, form, /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }\n      }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Danger\",\n        clicked: this.switchAuthModeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      }, \"SWITCH TO \", signupMode ? \"SIGNIN\" : \"SIGNUP\"));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegisterSubmit: function onRegisterSubmit(registrationInfo) {\n      return dispatch(register(registrationInfo));\n    },\n    onLogoutSubmit: function onLogoutSubmit() {\n      return dispatch(logout());\n    },\n    onLoginSubmit: function onLoginSubmit(loginInfo) {\n      return dispatch(login(loginInfo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth); // import React, { useState, useEffect, useRef } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n// const auth = props => {\n//     const [signupMode, setSignupMode] = useState(false);\n//     const [error, setError] = useState(\"\");\n//     const [controls, setControls] = useState ({\n//       name: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"text\",\n//           placeholder: \"Full Name\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 1,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       email: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"email\",\n//           placeholder: \"Mail Address\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           isEmail: true,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       password: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"password\",\n//           placeholder: \"Password\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 6,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//     })\n//   const didMountRef = useRef(false);\n//   useEffect(() => {\n//     // Check if Logout pressed\n//     // if (props.isAuthenticated) {\n//     // props.onLogoutSubmit();\n//     // }\n//     if(didMountRef.current ) {\n//         console.log(\"componentDidUpdate[Auth]\");\n//         if (error !== props.error) {\n//           if (props.error.id === \"REGISTER_FAIL\") {\n//             console.log(\"REGISTER ERROR\")\n//             setError(props.error);\n//           } else {\n//             setError(null);\n//           }\n//         }\n//         if (error !== props.error) {\n//             console.log(\"LOGIN ERROR\")\n//           if (props.error.id === \"LOGIN_FAIL\") {\n//             setError(props.error);\n//           } else {\n//             setError(null);\n//           }\n//         }\n//     }\n//     else {\n//         didMountRef.current = true\n//         console.log(\"componentDidMount[Orders]\");\n//         props.onLogoutSubmit()\n//     }\n//     ;\n//   }, []);\n//   const checkVaildity = (value, rules) => {\n//     let isValid = true;\n//     if (rules.required) {\n//       isValid = value.trim() !== \"\" && isValid;\n//     }\n//     if (rules.minLength) {\n//       isValid = value.length >= rules.minLength && isValid;\n//     }\n//     if (rules.maxLength) {\n//       isValid = value.length <= rules.maxLength && isValid;\n//     }\n//     return isValid;\n//   };\n//   const inputChangedHandler = (event, controlName) => {\n//     const updatedControls = {\n//       ...controls,\n//       [controlName]: {\n//         ...controls[controlName],\n//         value: event.target.value,\n//         valid: checkVaildity(\n//           event.target.value,\n//           controls[controlName].validation\n//         ),\n//         touched: true,\n//       },\n//     };\n//     // console.log(controls.password)\n//     setControls( updatedControls );\n//   };\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     if (signupMode) {\n//       const registrationInfo = {\n//         name: controls.name.value,\n//         email: controls.email.value,\n//         password: controls.password.value,\n//       };\n//       props.onRegisterSubmit(registrationInfo);\n//     } else if (!signupMode) {\n//       const loginInfo = {\n//         email: controls.email.value,\n//         password: controls.password.value,\n//       };\n//       props.onLoginSubmit(loginInfo);\n//     }\n//   };\n//   const switchAuthModeHandler = () => {\n//     setSignupMode(!signupMode)\n//   };\n//     const formElementsArray = [];\n//     for (let key in controls) {\n//       formElementsArray.push({\n//         id: key,\n//         config: controls[key],\n//       });\n//     }\n//     let form = formElementsArray.map((formElement) => {\n//       if (signupMode || !(formElement.id === \"name\")) {\n//         return (\n//           <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             invalid={!formElement.config.valid}\n//             shouldValidate={formElement.config.validation}\n//             touched={formElement.config.touched}\n//             changed={(event) => inputChangedHandler(event, formElement.id)}\n//           />\n//         );\n//       }\n//       return null;\n//     });\n//     if (props.isLoading) {\n//       form = <Spinner />;\n//     }\n//     let errorMessage = null;\n//     if (error) {\n//       errorMessage = <p>{error.msg.msg}</p>;\n//     }\n//     let redirectTo = <Redirect to=\"/\" />;\n//     if (!props.isAuthenticated) {\n//       redirectTo = null;\n//     }\n//     return (\n//       <div className={classes.Auth}>\n//         {/* Redirect when successfull register */}\n//         {redirectTo}\n//         {errorMessage}\n//         <form onSubmit={submitHandler}>\n//           {form}\n//           <Button btnType={\"Success\"}>SUBMIT</Button>\n//         </form>\n//         <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\n//           SWITCH TO {signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//         </Button>\n//       </div>\n//     );\n// }\n// const mapStateToProps = (state) => {\n//   return {\n//     isAuthenticated: state.auth.isAuthenticated,\n//     error: state.error,\n//     isLoading: state.auth.isLoading,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRegisterSubmit: (registrationInfo) =>\n//       dispatch(register(registrationInfo)),\n//     onLogoutSubmit: () => dispatch(logout()),\n//     onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(auth);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","connect","Spinner","register","logout","login","Redirect","Auth","state","signupMode","error","controls","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","email","isEmail","password","checkVaildity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","registrationInfo","props","onRegisterSubmit","loginInfo","onLoginSubmit","switchAuthModeHandler","prevState","console","log","onLogoutSubmit","prevProps","id","formElementsArray","key","push","config","form","map","formElement","isLoading","errorMessage","msg","redirectTo","isAuthenticated","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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":["\n\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Auth extends Component {\n  state = {\n    signupMode: false,\n    error: \"\",\n    controls: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Full Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 1,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n  };\n\n  componentDidMount() {\n    // Check if Logout pressed\n    // if (props.isAuthenticated) {\n    // props.onLogoutSubmit();\n    // }\n    console.log(\"componentDidMount[Orders]\");\n    props.onLogoutSubmit();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"componentDidUpdate[Orders]\");\n    if (prevProps.error !== props.error) {\n      if (props.error.id === \"REGISTER_FAIL\") {\n        this.setState({ error: props.error });\n      } else {\n        this.setState({ error: null });\n      }\n    }\n    if (prevProps.error !== props.error) {\n      if (props.error.id === \"LOGIN_FAIL\") {\n        this.setState({ error: props.error });\n      } else {\n        this.setState({ error: null });\n      }\n    }\n  }\n\n  checkVaildity = (value, rules) => {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    return isValid;\n  };\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...controls,\n      [controlName]: {\n        ...controls[controlName],\n        value: event.target.value,\n        valid: this.checkVaildity(\n          event.target.value,\n          controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    // console.log(controls.password)\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    if (signupMode) {\n      const registrationInfo = {\n        name: controls.name.value,\n        email: controls.email.value,\n        password: controls.password.value,\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!signupMode) {\n      const loginInfo = {\n        email: controls.email.value,\n        password: controls.password.value,\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { signupMode: !prevState.signupMode };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in controls) {\n      formElementsArray.push({\n        id: key,\n        config: controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => {\n      if (signupMode || !(formElement.id === \"name\")) {\n        return (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        );\n      }\n      return null;\n    });\n\n    if (props.isLoading) {\n      form = <Spinner />;\n    }\n    let errorMessage = null;\n    if (error) {\n      errorMessage = <p>{error.msg.msg}</p>;\n    }\n\n    let redirectTo = <Redirect to=\"/\" />;\n    if (!props.isAuthenticated) {\n      redirectTo = null;\n    }\n    return (\n      <div className={classes.Auth}>\n        {/* Redirect when successfull register */}\n        {redirectTo}\n\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType={\"Success\"}>SUBMIT</Button>\n        </form>\n\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRegisterSubmit: (registrationInfo) =>\n      dispatch(register(registrationInfo)),\n    onLogoutSubmit: () => dispatch(logout()),\n    onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n\n// const auth = props => {\n//     const [signupMode, setSignupMode] = useState(false);\n//     const [error, setError] = useState(\"\");\n//     const [controls, setControls] = useState ({\n//       name: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"text\",\n//           placeholder: \"Full Name\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 1,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       email: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"email\",\n//           placeholder: \"Mail Address\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           isEmail: true,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       password: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"password\",\n//           placeholder: \"Password\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 6,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//     })\n  \n//   const didMountRef = useRef(false);\n//   useEffect(() => {\n//     // Check if Logout pressed\n//     // if (props.isAuthenticated) {\n//     // props.onLogoutSubmit();\n//     // }\n//     if(didMountRef.current ) {\n//         console.log(\"componentDidUpdate[Auth]\");\n//         if (error !== props.error) {\n//           if (props.error.id === \"REGISTER_FAIL\") {\n//             console.log(\"REGISTER ERROR\")\n\n//             setError(props.error);\n//           } else {\n//             setError(null);\n//           }\n//         }\n//         if (error !== props.error) {\n//             console.log(\"LOGIN ERROR\")\n//           if (props.error.id === \"LOGIN_FAIL\") {\n//             setError(props.error);\n//           } else {\n//             setError(null);\n//           }\n//         }\n//     }\n//     else {\n//         didMountRef.current = true\n//         console.log(\"componentDidMount[Orders]\");\n//         props.onLogoutSubmit()\n//     }\n//     ;\n//   }, []);\n\n\n\n//   const checkVaildity = (value, rules) => {\n//     let isValid = true;\n//     if (rules.required) {\n//       isValid = value.trim() !== \"\" && isValid;\n//     }\n//     if (rules.minLength) {\n//       isValid = value.length >= rules.minLength && isValid;\n//     }\n//     if (rules.maxLength) {\n//       isValid = value.length <= rules.maxLength && isValid;\n//     }\n//     return isValid;\n//   };\n\n//   const inputChangedHandler = (event, controlName) => {\n//     const updatedControls = {\n//       ...controls,\n//       [controlName]: {\n//         ...controls[controlName],\n//         value: event.target.value,\n//         valid: checkVaildity(\n//           event.target.value,\n//           controls[controlName].validation\n//         ),\n//         touched: true,\n//       },\n//     };\n//     // console.log(controls.password)\n//     setControls( updatedControls );\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     if (signupMode) {\n//       const registrationInfo = {\n//         name: controls.name.value,\n//         email: controls.email.value,\n//         password: controls.password.value,\n//       };\n//       props.onRegisterSubmit(registrationInfo);\n//     } else if (!signupMode) {\n//       const loginInfo = {\n//         email: controls.email.value,\n//         password: controls.password.value,\n//       };\n//       props.onLoginSubmit(loginInfo);\n//     }\n//   };\n\n//   const switchAuthModeHandler = () => {\n//     setSignupMode(!signupMode)\n//   };\n\n//     const formElementsArray = [];\n//     for (let key in controls) {\n//       formElementsArray.push({\n//         id: key,\n//         config: controls[key],\n//       });\n//     }\n\n//     let form = formElementsArray.map((formElement) => {\n//       if (signupMode || !(formElement.id === \"name\")) {\n//         return (\n//           <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             invalid={!formElement.config.valid}\n//             shouldValidate={formElement.config.validation}\n//             touched={formElement.config.touched}\n//             changed={(event) => inputChangedHandler(event, formElement.id)}\n//           />\n//         );\n//       }\n//       return null;\n//     });\n\n//     if (props.isLoading) {\n//       form = <Spinner />;\n//     }\n\n//     let errorMessage = null;\n//     if (error) {\n//       errorMessage = <p>{error.msg.msg}</p>;\n\n//     }\n\n//     let redirectTo = <Redirect to=\"/\" />;\n//     if (!props.isAuthenticated) {\n//       redirectTo = null;\n//     }\n//     return (\n//       <div className={classes.Auth}>\n//         {/* Redirect when successfull register */}\n//         {redirectTo}\n\n//         {errorMessage}\n//         <form onSubmit={submitHandler}>\n//           {form}\n//           <Button btnType={\"Success\"}>SUBMIT</Button>\n//         </form>\n\n//         <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\n//           SWITCH TO {signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//         </Button>\n//       </div>\n//     );\n  \n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     isAuthenticated: state.auth.isAuthenticated,\n//     error: state.error,\n//     isLoading: state.auth.isLoading,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRegisterSubmit: (registrationInfo) =>\n//       dispatch(register(registrationInfo)),\n//     onLogoutSubmit: () => dispatch(logout()),\n//     onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(auth);\n"]},"metadata":{},"sourceType":"module"}