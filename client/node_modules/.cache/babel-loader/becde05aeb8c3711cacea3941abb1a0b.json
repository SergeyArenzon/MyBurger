{"ast":null,"code":"import _defineProperty from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js\";\n\n// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n// class Auth extends Component {\n//     state = {\n//         signupMode: false,\n//         error: \"\",\n//         controls: {\n//             name: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"text\",\n//                     placeholder: \"Full Name\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 1,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             email: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"email\",\n//                     placeholder: \"Mail Address\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     isEmail: true,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             password: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"password\",\n//                     placeholder: \"Password\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 6,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//         },\n//     };\n//     componentDidMount() {\n//         // Check if Logout pressed\n//         // if (this.props.isAuthenticated) {\n//             // this.props.onLogoutSubmit();\n//         // }\n//         console.log('componentDidMount[Orders]')\n//         this.props.onLogoutSubmit();\n//     }\n//     componentDidUpdate(prevProps) {\n//         console.log('componentDidUpdate[Orders]')\n//         if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"REGISTER_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n//         if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"LOGIN_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n//     }\n//     checkVaildity = (value, rules) => {\n//         let isValid = true;\n//         if (rules.required) {\n//             isValid = value.trim() !== \"\" && isValid;\n//         }\n//         if (rules.minLength) {\n//             isValid = value.length >= rules.minLength && isValid;\n//         }\n//         if (rules.maxLength) {\n//             isValid = value.length <= rules.maxLength && isValid;\n//         }\n//         return isValid;\n//     };\n//     inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 valid: this.checkVaildity(\n//                     event.target.value,\n//                     this.state.controls[controlName].validation\n//                 ),\n//                 touched: true,\n//             },\n//         };\n//         // console.log(this.state.controls.password)\n//         this.setState({ controls: updatedControls });\n//     };\n//     submitHandler = (event) => {\n//         event.preventDefault();\n//         if (this.state.signupMode) {\n//             const registrationInfo = {\n//                 name: this.state.controls.name.value,\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onRegisterSubmit(registrationInfo);\n//         } else if (!this.state.signupMode) {\n//             const loginInfo = {\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onLoginSubmit(loginInfo);\n//         }\n//     };\n//     switchAuthModeHandler = () => {\n//         this.setState((prevState) => {\n//             return { signupMode: !prevState.signupMode };\n//         });\n//     };\n//     render() {\n//         const formElementsArray = [];\n//         for (let key in this.state.controls) {\n//             formElementsArray.push({\n//                 id: key,\n//                 config: this.state.controls[key],\n//             });\n//         }\n//         let form = formElementsArray.map((formElement) => {\n//             if (this.state.signupMode || !(formElement.id === \"name\")) {\n//                 return (\n//                     <Input\n//                         key={formElement.id}\n//                         elementType={formElement.config.elementType}\n//                         elementConfig={formElement.config.elementConfig}\n//                         value={formElement.config.value}\n//                         invalid={!formElement.config.valid}\n//                         shouldValidate={formElement.config.validation}\n//                         touched={formElement.config.touched}\n//                         changed={(event) =>\n//                             this.inputChangedHandler(event, formElement.id)\n//                         }\n//                     />\n//                 );\n//             }\n//             return null;\n//         });\n//         if (this.props.isLoading) {\n//             form = <Spinner />;\n//         }\n//         let errorMessage = null;\n//         if (this.state.error) {\n//             errorMessage = <p>{this.state.error.msg.msg}</p>;\n//         }\n//         let redirectTo = <Redirect to=\"/\" />;\n//         if (!this.props.isAuthenticated) {\n//             redirectTo = null;\n//         }\n//         return (\n//             <div className={classes.Auth}>\n//                 {/* Redirect when successfull register */}\n//                 {redirectTo}\n//                 {errorMessage}\n//                 <form onSubmit={this.submitHandler}>\n//                     {form}\n//                     <Button btnType={\"Success\"}>SUBMIT</Button>\n//                 </form>\n//                 <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//                     SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//                 </Button>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = (state) => {\n//     return {\n//         isAuthenticated: state.auth.isAuthenticated,\n//         error: state.error,\n//         isLoading: state.auth.isLoading,\n//     };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         onRegisterSubmit: (registrationInfo) =>\n//             dispatch(register(registrationInfo)),\n//         onLogoutSubmit: () => dispatch(logout()),\n//         onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//     };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n//----------\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nvar auth = function auth(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      signupMode = _useState2[0],\n      setSignupMode = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Full Name\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 1\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Mail Address\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      controls = _useState6[0],\n      setControls = _useState6[1];\n\n  var didMountRef = useRef(false);\n  useEffect(function () {\n    // Check if Logout pressed\n    // if (props.isAuthenticated) {\n    // props.onLogoutSubmit();\n    // }\n    props.onLogoutSubmit();\n  });\n  useEffect(function () {\n    if (didMountRef.current) {\n      console.log(props.error.msg.msg);\n\n      if (error !== props.error) {\n        if (props.error.id === \"REGISTER_FAIL\") {\n          setError(props.error.id);\n          console.log(\"props.error.id: \" + props.error.id);\n          console.log(\"error: \" + error);\n        } else {\n          setError(null);\n        }\n      }\n\n      if (error !== props.error) {\n        if (props.error.id === \"LOGIN_FAIL\") {\n          setError(props.error.id);\n        } else {\n          setError(null);\n        }\n      } else {\n        setError(null);\n      }\n    } else {\n      didMountRef.current = true;\n    }\n  });\n\n  var checkVaildity = function checkVaildity(value, rules) {\n    var isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  };\n\n  var inputChangedHandler = function inputChangedHandler(event, controlName) {\n    var updatedControls = _objectSpread({}, controls, _defineProperty({}, controlName, _objectSpread({}, controls[controlName], {\n      value: event.target.value,\n      valid: checkVaildity(event.target.value, controls[controlName].validation),\n      touched: true\n    }))); // console.log(controls.password)\n\n\n    setControls(updatedControls);\n  };\n\n  var submitHandler = function submitHandler(event) {\n    event.preventDefault();\n\n    if (signupMode) {\n      var registrationInfo = {\n        name: controls.name.value,\n        email: controls.email.value,\n        password: controls.password.value\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!signupMode) {\n      var loginInfo = {\n        email: controls.email.value,\n        password: controls.password.value\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  var switchAuthModeHandler = function switchAuthModeHandler() {\n    setSignupMode(!signupMode);\n  };\n\n  var formElementsArray = [];\n\n  for (var key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  var form = formElementsArray.map(function (formElement) {\n    if (signupMode || !(formElement.id === \"name\")) {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: function changed(event) {\n          return inputChangedHandler(event, formElement.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return null;\n  });\n\n  if (props.isLoading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var errorMessage = null;\n\n  if (error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 20\n      }\n    }, error.msg.msg);\n  }\n\n  var redirectTo = /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 20\n    }\n  });\n\n  if (!props.isAuthenticated) {\n    redirectTo = null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 5\n    }\n  }, redirectTo, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 9\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Danger\",\n    clicked: switchAuthModeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }\n  }, \"SWITCH TO \", signupMode ? \"SIGNIN\" : \"SIGNUP\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegisterSubmit: function onRegisterSubmit(registrationInfo) {\n      return dispatch(register(registrationInfo));\n    },\n    onLogoutSubmit: function onLogoutSubmit() {\n      return dispatch(logout());\n    },\n    onLoginSubmit: function onLoginSubmit(loginInfo) {\n      return dispatch(login(loginInfo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","useRef","Input","Button","classes","connect","Spinner","register","logout","login","Redirect","auth","props","signupMode","setSignupMode","error","setError","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","email","isEmail","password","controls","setControls","didMountRef","onLogoutSubmit","current","console","log","msg","id","checkVaildity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","registrationInfo","onRegisterSubmit","loginInfo","onLoginSubmit","switchAuthModeHandler","formElementsArray","key","push","config","form","map","formElement","isLoading","errorMessage","redirectTo","isAuthenticated","Auth","mapStateToProps","state","mapDispatchToProps","dispatch"],"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","sourcesContent":["// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n\n// class Auth extends Component {\n//     state = {\n//         signupMode: false,\n//         error: \"\",\n//         controls: {\n//             name: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"text\",\n//                     placeholder: \"Full Name\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 1,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             email: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"email\",\n//                     placeholder: \"Mail Address\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     isEmail: true,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             password: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"password\",\n//                     placeholder: \"Password\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 6,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//         },\n//     };\n\n//     componentDidMount() {\n//         // Check if Logout pressed\n//         // if (this.props.isAuthenticated) {\n//             // this.props.onLogoutSubmit();\n//         // }\n//         console.log('componentDidMount[Orders]')\n//         this.props.onLogoutSubmit();\n\n//     }\n\n//     componentDidUpdate(prevProps) {\n//         console.log('componentDidUpdate[Orders]')\n//         if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"REGISTER_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n//         if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"LOGIN_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n\n//     }\n\n//     checkVaildity = (value, rules) => {\n//         let isValid = true;\n//         if (rules.required) {\n//             isValid = value.trim() !== \"\" && isValid;\n//         }\n//         if (rules.minLength) {\n//             isValid = value.length >= rules.minLength && isValid;\n//         }\n//         if (rules.maxLength) {\n//             isValid = value.length <= rules.maxLength && isValid;\n//         }\n//         return isValid;\n//     };\n\n//     inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 valid: this.checkVaildity(\n//                     event.target.value,\n//                     this.state.controls[controlName].validation\n//                 ),\n//                 touched: true,\n//             },\n//         };\n//         // console.log(this.state.controls.password)\n//         this.setState({ controls: updatedControls });\n//     };\n\n//     submitHandler = (event) => {\n//         event.preventDefault();\n//         if (this.state.signupMode) {\n//             const registrationInfo = {\n//                 name: this.state.controls.name.value,\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onRegisterSubmit(registrationInfo);\n//         } else if (!this.state.signupMode) {\n//             const loginInfo = {\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onLoginSubmit(loginInfo);\n//         }\n//     };\n\n//     switchAuthModeHandler = () => {\n//         this.setState((prevState) => {\n//             return { signupMode: !prevState.signupMode };\n//         });\n//     };\n\n//     render() {\n//         const formElementsArray = [];\n//         for (let key in this.state.controls) {\n//             formElementsArray.push({\n//                 id: key,\n//                 config: this.state.controls[key],\n//             });\n//         }\n\n//         let form = formElementsArray.map((formElement) => {\n//             if (this.state.signupMode || !(formElement.id === \"name\")) {\n//                 return (\n//                     <Input\n//                         key={formElement.id}\n//                         elementType={formElement.config.elementType}\n//                         elementConfig={formElement.config.elementConfig}\n//                         value={formElement.config.value}\n//                         invalid={!formElement.config.valid}\n//                         shouldValidate={formElement.config.validation}\n//                         touched={formElement.config.touched}\n//                         changed={(event) =>\n//                             this.inputChangedHandler(event, formElement.id)\n//                         }\n//                     />\n//                 );\n//             }\n//             return null;\n//         });\n\n//         if (this.props.isLoading) {\n//             form = <Spinner />;\n//         }\n//         let errorMessage = null;\n//         if (this.state.error) {\n//             errorMessage = <p>{this.state.error.msg.msg}</p>;\n//         }\n\n//         let redirectTo = <Redirect to=\"/\" />;\n//         if (!this.props.isAuthenticated) {\n//             redirectTo = null;\n//         }\n//         return (\n//             <div className={classes.Auth}>\n//                 {/* Redirect when successfull register */}\n//                 {redirectTo}\n\n//                 {errorMessage}\n//                 <form onSubmit={this.submitHandler}>\n//                     {form}\n//                     <Button btnType={\"Success\"}>SUBMIT</Button>\n//                 </form>\n\n//                 <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//                     SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//                 </Button>\n//             </div>\n//         );\n//     }\n// }\n\n// const mapStateToProps = (state) => {\n//     return {\n//         isAuthenticated: state.auth.isAuthenticated,\n//         error: state.error,\n//         isLoading: state.auth.isLoading,\n//     };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         onRegisterSubmit: (registrationInfo) =>\n//             dispatch(register(registrationInfo)),\n//         onLogoutSubmit: () => dispatch(logout()),\n//         onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//     };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n//----------\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nconst auth = (props) => {\n  const [signupMode, setSignupMode] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [controls, setControls] = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Full Name\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 1,\n      },\n      valid: false,\n      touched: false,\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Mail Address\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      valid: false,\n      touched: false,\n    },\n  });\n\n  const didMountRef = useRef(false);\n  useEffect(() => {\n    // Check if Logout pressed\n    // if (props.isAuthenticated) {\n    // props.onLogoutSubmit();\n    // }\n\n    props.onLogoutSubmit();\n  });\n\n  useEffect(() => {\n    if (didMountRef.current) {\n        console.log(props.error.msg.msg)\n      if (error !== props.error) {\n        if (props.error.id === \"REGISTER_FAIL\") {\n          setError(props.error.id);\n          console.log(\"props.error.id: \" + props.error.id);\n          console.log(\"error: \" + error);\n        } else {\n          setError(null);\n        }\n      }\n      if (error !== props.error) {\n        if (props.error.id === \"LOGIN_FAIL\") {\n          setError(props.error.id);\n        } else {\n          setError(null);\n        }\n      } else {\n        setError(null);\n      }\n    } else {\n      didMountRef.current = true;\n    }\n  });\n\n  const checkVaildity = (value, rules) => {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    return isValid;\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...controls,\n      [controlName]: {\n        ...controls[controlName],\n        value: event.target.value,\n        valid: checkVaildity(\n          event.target.value,\n          controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    // console.log(controls.password)\n    setControls(updatedControls);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (signupMode) {\n      const registrationInfo = {\n        name: controls.name.value,\n        email: controls.email.value,\n        password: controls.password.value,\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!signupMode) {\n      const loginInfo = {\n        email: controls.email.value,\n        password: controls.password.value,\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  const switchAuthModeHandler = () => {\n    setSignupMode(!signupMode);\n  };\n\n  const formElementsArray = [];\n  for (let key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key],\n    });\n  }\n\n  let form = formElementsArray.map((formElement) => {\n    if (signupMode || !(formElement.id === \"name\")) {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => inputChangedHandler(event, formElement.id)}\n        />\n      );\n    }\n    return null;\n  });\n\n  if (props.isLoading) {\n    form = <Spinner />;\n  }\n\n  let errorMessage = null;\n  if (error) {\n    errorMessage = <p>{error.msg.msg}</p>;\n  }\n\n  let redirectTo = <Redirect to=\"/\" />;\n  if (!props.isAuthenticated) {\n    redirectTo = null;\n  }\n  return (\n    <div className={classes.Auth}>\n      {/* Redirect when successfull register */}\n      {redirectTo}\n\n      {errorMessage}\n      <form onSubmit={submitHandler}>\n        {form}\n        <Button btnType={\"Success\"}>SUBMIT</Button>\n      </form>\n\n      <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\n        SWITCH TO {signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRegisterSubmit: (registrationInfo) =>\n      dispatch(register(registrationInfo)),\n    onLogoutSubmit: () => dispatch(logout()),\n    onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);\n"]},"metadata":{},"sourceType":"module"}