{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AuthProvider = require('./auth_provider').AuthProvider;\n\nvar MongoCredentials = require('./mongo_credentials').MongoCredentials;\n\nvar MongoError = require('../error').MongoError;\n\nvar crypto = require('crypto');\n\nvar http = require('http');\n\nvar maxWireVersion = require('../utils').maxWireVersion;\n\nvar url = require('url');\n\nvar aws4;\n\ntry {\n  aws4 = require('aws4');\n} catch (e) {// don't do anything;\n}\n\nvar ASCII_N = 110;\nvar AWS_RELATIVE_URI = 'http://169.254.170.2';\nvar AWS_EC2_URI = 'http://169.254.169.254';\nvar AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n\nvar MongoDBAWS = /*#__PURE__*/function (_AuthProvider) {\n  _inherits(MongoDBAWS, _AuthProvider);\n\n  function MongoDBAWS() {\n    _classCallCheck(this, MongoDBAWS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MongoDBAWS).apply(this, arguments));\n  }\n\n  _createClass(MongoDBAWS, [{\n    key: \"auth\",\n    value: function auth(authContext, callback) {\n      var _this = this;\n\n      var connection = authContext.connection;\n      var credentials = authContext.credentials;\n\n      if (maxWireVersion(connection) < 9) {\n        callback(new MongoError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n        return;\n      }\n\n      if (aws4 == null) {\n        callback(new MongoError('MONGODB-AWS authentication requires the `aws4` module, please install it as a dependency of your project'));\n        return;\n      }\n\n      if (credentials.username == null) {\n        makeTempCredentials(credentials, function (err, tempCredentials) {\n          if (err) return callback(err);\n          authContext.credentials = tempCredentials;\n\n          _this.auth(authContext, callback);\n        });\n        return;\n      }\n\n      var username = credentials.username;\n      var password = credentials.password;\n      var db = credentials.source;\n      var token = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n      var bson = this.bson;\n      crypto.randomBytes(32, function (err, nonce) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var saslStart = {\n          saslStart: 1,\n          mechanism: 'MONGODB-AWS',\n          payload: bson.serialize({\n            r: nonce,\n            p: ASCII_N\n          })\n        };\n        connection.command(\"\".concat(db, \".$cmd\"), saslStart, function (err, result) {\n          if (err) return callback(err);\n          var res = result.result;\n          var serverResponse = bson.deserialize(res.payload.buffer);\n          var host = serverResponse.h;\n          var serverNonce = serverResponse.s.buffer;\n\n          if (serverNonce.length !== 64) {\n            callback(new MongoError(\"Invalid server nonce length \".concat(serverNonce.length, \", expected 64\")));\n            return;\n          }\n\n          if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n            callback(new MongoError('Server nonce does not begin with client nonce'));\n            return;\n          }\n\n          if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            callback(new MongoError(\"Server returned an invalid host: \\\"\".concat(host, \"\\\"\")));\n            return;\n          }\n\n          var body = 'Action=GetCallerIdentity&Version=2011-06-15';\n          var options = aws4.sign({\n            method: 'POST',\n            host: host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Content-Length': body.length,\n              'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n              'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body: body\n          }, {\n            accessKeyId: username,\n            secretAccessKey: password,\n            token: token\n          });\n          var authorization = options.headers.Authorization;\n          var date = options.headers['X-Amz-Date'];\n          var payload = {\n            a: authorization,\n            d: date\n          };\n\n          if (token) {\n            payload.t = token;\n          }\n\n          var saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: bson.serialize(payload)\n          };\n          connection.command(\"\".concat(db, \".$cmd\"), saslContinue, function (err) {\n            if (err) return callback(err);\n            callback();\n          });\n        });\n      });\n    }\n  }]);\n\n  return MongoDBAWS;\n}(AuthProvider);\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (creds.AccessKeyId == null || creds.SecretAccessKey == null || creds.Token == null) {\n      callback(new MongoError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(undefined, new MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: 'MONGODB-AWS',\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  } // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n\n\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(\"\".concat(AWS_RELATIVE_URI).concat(process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI), function (err, res) {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  } // Otherwise assume we are on an EC2 instance\n  // get a token\n\n\n  request(\"\".concat(AWS_EC2_URI, \"/latest/api/token\"), {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, function (err, token) {\n    if (err) return callback(err); // get role name\n\n    request(\"\".concat(AWS_EC2_URI, \"/\").concat(AWS_EC2_PATH), {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, function (err, roleName) {\n      if (err) return callback(err); // get temp credentials\n\n      request(\"\".concat(AWS_EC2_URI, \"/\").concat(AWS_EC2_PATH, \"/\").concat(roleName), {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, function (err, creds) {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\n\nfunction deriveRegion(host) {\n  var parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), options);\n  var req = http.request(options, function (res) {\n    res.setEncoding('utf8');\n    var data = '';\n    res.on('data', function (d) {\n      return data += d;\n    });\n    res.on('end', function () {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        var parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        callback(new MongoError(\"Invalid JSON response: \\\"\".concat(data, \"\\\"\")));\n      }\n    });\n  });\n  req.on('error', function (err) {\n    return callback(err);\n  });\n  req.end();\n}\n\nmodule.exports = MongoDBAWS;","map":null,"metadata":{},"sourceType":"script"}