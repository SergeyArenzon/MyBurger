{"ast":null,"code":"import _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Checkout/ContactData/ContactData.js\";\n\nimport React, { useState } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport { Redirect } from \"react-router-dom\";\n\nvar contactData = function contactData(props) {\n  var _useState = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Your Name\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Street\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"ZIP Code\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Country\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Your Email\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: \"select\",\n      elementConfig: {\n        options: [{\n          value: \"fastest\",\n          displayValue: \"Fastest\"\n        }, {\n          value: \"cheapest\",\n          displayValue: \"Cheapest\"\n        }],\n        placeholder: \"ZIP Code\"\n      },\n      validation: {\n        required: false\n      },\n      value: \"fastest\",\n      valid: true,\n      touched: false\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderForm = _useState2[0],\n      setOrderForm = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formIsValid = _useState4[0],\n      setFormIsValid = _useState4[1];\n\n  var orderHandler = function orderHandler(event) {\n    event.preventDefault();\n    var formData = {};\n\n    for (var formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    var ingredients = props.ings;\n    var price = props.price; //   push new order\n\n    var order = {\n      userId: props.auth.user._id,\n      ingredients: ingredients,\n      price: price.toFixed(2),\n      orderData: formData\n    };\n    console.log(order);\n    props.onOrderBurger(order); // props.history.push(\"/\");\n  };\n\n  var checkVaildity = function checkVaildity(value, rules) {\n    var isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    console.log(value);\n    return isValid;\n  };\n\n  var inputChangedHandle = function inputChangedHandle(event, inputIdentifier) {\n    var updatedOrderForm = _objectSpread({}, orderForm);\n\n    var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkVaildity(updatedFormElement.value, updatedFormElement.validation);\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    updatedFormElement.touched = true;\n    var formIsValid = true;\n\n    for (var key in updatedOrderForm) {\n      formIsValid = updatedOrderForm[key].valid && formIsValid;\n    }\n\n    console.log(updatedFormElement);\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n  var formElementsArray = [];\n\n  for (var key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  var form = null;\n\n  if (props.loading) {\n    console.log(\"---------------spinner-------------------\");\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 16\n      }\n    });\n  } else if (!props.auth.isAuthenticated) {\n    // form = <Authentication />;\n    props.history.push(\"/checkout/contact-data\");\n    form = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/auth\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 16\n      }\n    });\n  } else {\n    form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: orderHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"Order Info\"), formElementsArray.map(function (formElement) {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.value,\n        invalid: !formElement.config.valid,\n        changed: function changed(event) {\n          return inputChangedHandle(event, formElement.id);\n        },\n        touched: formElement.config.touched,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }\n      });\n    }), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !formIsValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, \"ORDER\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 12\n    }\n  }, form);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(contactData);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","useState","Button","classes","Spinner","Input","connect","actions","Redirect","contactData","props","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","ingredients","ings","price","order","userId","auth","user","_id","toFixed","orderData","console","log","onOrderBurger","checkVaildity","rules","isValid","trim","length","inputChangedHandle","inputIdentifier","updatedOrderForm","updatedFormElement","target","key","formElementsArray","push","id","config","form","loading","isAuthenticated","history","map","formElement","ContactData","mapStateToProps","state","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport { Redirect } from \"react-router-dom\";\n\nconst contactData = (props) => {\n    const [orderForm, setOrderForm] = useState({\n        name: {\n            elementType: \"input\",\n            elementConfig: {\n                type: \"text\",\n                placeholder: \"Your Name\",\n            },\n            value: \"\",\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        street: {\n            elementType: \"input\",\n            elementConfig: {\n                type: \"text\",\n                placeholder: \"Street\",\n            },\n            value: \"\",\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        zipCode: {\n            elementType: \"input\",\n            elementConfig: {\n                type: \"text\",\n                placeholder: \"ZIP Code\",\n            },\n            value: \"\",\n            validation: {\n                required: true,\n                minLength: 5,\n                maxLength: 5,\n            },\n            valid: false,\n            touched: false,\n        },\n        country: {\n            elementType: \"input\",\n            elementConfig: {\n                type: \"text\",\n                placeholder: \"Country\",\n            },\n            value: \"\",\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        email: {\n            elementType: \"input\",\n            elementConfig: {\n                type: \"email\",\n                placeholder: \"Your Email\",\n            },\n            value: \"\",\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        deliveryMethod: {\n            elementType: \"select\",\n            elementConfig: {\n                options: [\n                    { value: \"fastest\", displayValue: \"Fastest\" },\n                    { value: \"cheapest\", displayValue: \"Cheapest\" },\n                ],\n                placeholder: \"ZIP Code\",\n            },\n            validation: { required: false },\n            value: \"fastest\",\n            valid: true,\n            touched: false,\n        },\n    });\n\n    const [formIsValid, setFormIsValid] = useState(false);\n\n    const orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] =\n                orderForm[formElementIdentifier].value;\n        }\n\n        const ingredients = props.ings;\n        const price = props.price;\n\n        //   push new order\n\n        const order = {\n            userId: props.auth.user._id,\n            ingredients: ingredients,\n            price: price.toFixed(2),\n            orderData: formData,\n        };\n\n        console.log(order);\n        props.onOrderBurger(order);\n        // props.history.push(\"/\");\n    };\n\n    const checkVaildity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        console.log(value);\n        return isValid;\n    };\n\n    const inputChangedHandle = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...orderForm,\n        };\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier],\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkVaildity(\n            updatedFormElement.value,\n            updatedFormElement.validation\n        );\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        updatedFormElement.touched = true;\n\n        let formIsValid = true;\n\n        for (let key in updatedOrderForm) {\n            formIsValid = updatedOrderForm[key].valid && formIsValid;\n        }\n\n        console.log(updatedFormElement);\n        setOrderForm(updatedOrderForm);\n        setFormIsValid(formIsValid);\n    };\n    const formElementsArray = [];\n    for (let key in orderForm) {\n        formElementsArray.push({\n            id: key,\n            config: orderForm[key],\n        });\n    }\n    let form = null;\n\n    if (props.loading) {\n        console.log(\"---------------spinner-------------------\");\n        form = <Spinner />;\n    } else if (!props.auth.isAuthenticated) {\n        // form = <Authentication />;\n        props.history.push(\"/checkout/contact-data\");\n        form = <Redirect to={\"/auth\"} />;\n    } else {\n        form = (\n            <form onSubmit={orderHandler}>\n                <h1>Order Info</h1>\n                {formElementsArray.map((formElement) => {\n                    return (\n                        <Input\n                            key={formElement.id}\n                            elementType={formElement.config.elementType}\n                            elementConfig={formElement.config.elementConfig}\n                            value={formElement.value}\n                            invalid={!formElement.config.valid}\n                            changed={(event) =>\n                                inputChangedHandle(event, formElement.id)\n                            }   \n                            touched={formElement.config.touched}\n                        />\n                    );\n                })}\n\n                <Button btnType=\"Success\" disabled={!formIsValid}>\n                    ORDER\n                </Button>\n            </form>\n        );\n    }\n\n    return <div className={classes.ContactData}>{form}</div>;\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        auth: state.auth,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onOrderBurger: (orderData) =>\n            dispatch(actions.purchaseBurger(orderData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(contactData);\n"]},"metadata":{},"sourceType":"module"}