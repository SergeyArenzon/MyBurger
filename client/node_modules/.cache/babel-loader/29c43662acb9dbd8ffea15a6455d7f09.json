{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar dns = require('dns');\n\nvar AuthProvider = require('./auth_provider').AuthProvider;\n\nvar retrieveKerberos = require('../utils').retrieveKerberos;\n\nvar MongoError = require('../error').MongoError;\n\nvar kGssapiClient = Symbol('GSSAPI_CLIENT');\nvar kerberos;\n\nvar GSSAPI = /*#__PURE__*/function (_AuthProvider) {\n  _inherits(GSSAPI, _AuthProvider);\n\n  function GSSAPI() {\n    _classCallCheck(this, GSSAPI);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GSSAPI).apply(this, arguments));\n  }\n\n  _createClass(GSSAPI, [{\n    key: \"prepare\",\n    value: function prepare(handshakeDoc, authContext, callback) {\n      var _this = this;\n\n      var host = authContext.options.host;\n      var port = authContext.options.port;\n      var credentials = authContext.credentials;\n\n      if (!host || !port || !credentials) {\n        return callback(new MongoError(\"Connection must specify: \".concat(host ? 'host' : '', \", \").concat(port ? 'port' : '', \", \").concat(credentials ? 'host' : 'credentials', \".\")));\n      }\n\n      if (kerberos == null) {\n        try {\n          kerberos = retrieveKerberos();\n        } catch (e) {\n          return callback(e);\n        }\n      }\n\n      var username = credentials.username;\n      var password = credentials.password;\n      var mechanismProperties = credentials.mechanismProperties;\n      var serviceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n      performGssapiCanonicalizeHostName(host, mechanismProperties, function (err, host) {\n        if (err) return callback(err);\n        var initOptions = {};\n\n        if (password != null) {\n          Object.assign(initOptions, {\n            user: username,\n            password: password\n          });\n        }\n\n        kerberos.initializeClient(\"\".concat(serviceName).concat(process.platform === 'win32' ? '/' : '@').concat(host), initOptions, function (err, client) {\n          if (err) return callback(new MongoError(err));\n          if (client == null) return callback();\n          _this[kGssapiClient] = client;\n          callback(undefined, handshakeDoc);\n        });\n      });\n    }\n  }, {\n    key: \"auth\",\n    value: function auth(authContext, callback) {\n      var connection = authContext.connection;\n      var credentials = authContext.credentials;\n      if (credentials == null) return callback(new MongoError('credentials required'));\n      var username = credentials.username;\n      var client = this[kGssapiClient];\n      if (client == null) return callback(new MongoError('gssapi client missing'));\n\n      function externalCommand(command, cb) {\n        return connection.command('$external.$cmd', command, cb);\n      }\n\n      client.step('', function (err, payload) {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), function (err, response) {\n          var result = response.result;\n          if (err) return callback(err);\n          negotiate(client, 10, result.payload, function (err, payload) {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), function (err, response) {\n              var result = response.result;\n              if (err) return callback(err);\n              finalize(client, username, result.payload, function (err, payload) {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload: payload\n                }, function (err, result) {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return GSSAPI;\n}(AuthProvider);\n\nmodule.exports = GSSAPI;\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId: conversationId,\n    payload: payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, function (err, response) {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, function (err, response) {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user: user\n    }, function (err, wrapped) {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  var canonicalizeHostName = typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean' ? mechanismProperties.gssapiCanonicalizeHostName : false;\n  if (!canonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, function (err, r) {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}