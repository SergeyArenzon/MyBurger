{"ast":null,"code":"import _defineProperty from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sergey/Dev/Web/myburger/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register } from \"../../store/actions/auth\";\n\nvar Auth = /*#__PURE__*/function (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      error: \"\",\n      controls: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Full Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 1\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    _this.checkVaildity = function (value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkVaildity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      }))); // console.log(this.state.controls.password)\n\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n      var registrationInfo = {\n        name: _this.state.controls.name.value,\n        email: _this.state.controls.email.value,\n        password: _this.state.controls.password.value\n      };\n\n      _this.props.onRegisterSubmit(registrationInfo);\n    };\n\n    _this.switchAuthModeHandler = function () {\n      _this.setState(function (prevState) {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.error !== this.props.error) {\n        if (this.props.error.id === \"REGISTER_FAIL\") {\n          this.setState({\n            error: this.props.error\n          });\n        } else {\n          this.setState({\n            error: this.props.error\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }\n        });\n      }); // if (this.props.loading) {\n      //     form = <Spinner />;\n      // }\n\n      var errorMessage = null;\n\n      if (this.state.error) {\n        errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 28\n          }\n        }, this.state.error.msg.msg);\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.Auth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }\n      }, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, form, /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }\n      }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Danger\",\n        clicked: this.switchAuthModeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegisterSubmit: function onRegisterSubmit(registrationInfo) {\n      return dispatch(register(registrationInfo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/sergey/Dev/Web/myburger/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","connect","actions","Spinner","register","Auth","state","error","controls","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","email","isEmail","password","isSignup","checkVaildity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","registrationInfo","props","onRegisterSubmit","switchAuthModeHandler","prevState","prevProps","id","formElementsArray","key","push","config","form","map","formElement","errorMessage","msg","mapStateToProps","isAuthenticated","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register } from \"../../store/actions/auth\";\n\nclass Auth extends Component {\n    state = {\n        error: \"\",\n        controls: {\n            name: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Full Name\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 1,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Mail Address\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"Password\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        isSignup: true,\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.error !== this.props.error) {\n            if (this.props.error.id === \"REGISTER_FAIL\") {\n                this.setState({ error: this.props.error });\n            }\n            else {\n                this.setState({ error: this.props.error });\n            }\n        }\n\n    }\n\n    checkVaildity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        return isValid;\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkVaildity(\n                    event.target.value,\n                    this.state.controls[controlName].validation\n                ),\n                touched: true,\n            },\n        };\n        // console.log(this.state.controls.password)\n        this.setState({ controls: updatedControls });\n    };\n\n    submitHandler = (event) => {\n        event.preventDefault();\n\n        const registrationInfo = {\n            name: this.state.controls.name.value,\n            email: this.state.controls.email.value,\n            password: this.state.controls.password.value,\n        };\n        this.props.onRegisterSubmit(registrationInfo);\n    };\n\n    switchAuthModeHandler = () => {\n        this.setState((prevState) => {\n            return { isSignup: !prevState.isSignup };\n        });\n    };\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key],\n            });\n        }\n\n        let form = formElementsArray.map((formElement) => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) =>\n                    this.inputChangedHandler(event, formElement.id)\n                }\n            />\n        ));\n        // if (this.props.loading) {\n        //     form = <Spinner />;\n        // }\n        let errorMessage = null;\n        if (this.state.error) {\n            errorMessage = <p>{this.state.error.msg.msg}</p>;\n        }\n        return (\n            <div className={classes.Auth}>\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType={\"Success\"}>SUBMIT</Button>\n                </form>\n\n                <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n                    {/* SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"} */}\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        error: state.error,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onRegisterSubmit: (registrationInfo) =>\n            dispatch(register(registrationInfo)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}