{"ast":null,"code":"import _defineProperty from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js\";\n\n// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n// class Auth extends Component {\n//   state = {\n//     signupMode: false,\n//     error: \"\",\n//     controls: {\n//       name: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"text\",\n//           placeholder: \"Full Name\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 1,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       email: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"email\",\n//           placeholder: \"Mail Address\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           isEmail: true,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       password: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"password\",\n//           placeholder: \"Password\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 6,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//     },\n//   };\n//   componentDidMount() {\n//     // Check if Logout pressed\n//     // if (this.props.isAuthenticated) {\n//     // this.props.onLogoutSubmit();\n//     // }\n//     console.log(\"componentDidMount[Orders]\");\n//     this.props.onLogoutSubmit();\n//   }\n//   componentDidUpdate(prevProps) {\n//     console.log(\"componentDidUpdate[Orders]\");\n//     if (prevProps.error !== this.props.error) {\n//       if (this.props.error.id === \"REGISTER_FAIL\") {\n//         this.setState({ error: this.props.error });\n//       } else if (this.props.error.id === \"LOGIN_FAIL\") {\n//         this.setState({ error: this.props.error });\n//       } else {\n//         this.setState({ error: null });\n//       }\n//     }\n//   }\n//   checkVaildity = (value, rules) => {\n//     let isValid = true;\n//     if (rules.required) {\n//       isValid = value.trim() !== \"\" && isValid;\n//     }\n//     if (rules.minLength) {\n//       isValid = value.length >= rules.minLength && isValid;\n//     }\n//     if (rules.maxLength) {\n//       isValid = value.length <= rules.maxLength && isValid;\n//     }\n//     return isValid;\n//   };\n//   inputChangedHandler = (event, controlName) => {\n//     const updatedControls = {\n//       ...this.state.controls,\n//       [controlName]: {\n//         ...this.state.controls[controlName],\n//         value: event.target.value,\n//         valid: this.checkVaildity(\n//           event.target.value,\n//           this.state.controls[controlName].validation\n//         ),\n//         touched: true,\n//       },\n//     };\n//     // console.log(this.state.controls.password)\n//     this.setState({ controls: updatedControls });\n//   };\n//   submitHandler = (event) => {\n//     event.preventDefault();\n//     if (this.state.signupMode) {\n//       const registrationInfo = {\n//         name: this.state.controls.name.value,\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       this.props.onRegisterSubmit(registrationInfo);\n//     } else if (!this.state.signupMode) {\n//       const loginInfo = {\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       this.props.onLoginSubmit(loginInfo);\n//     }\n//   };\n//   switchAuthModeHandler = () => {\n//     this.setState((prevState) => {\n//       return { signupMode: !prevState.signupMode };\n//     });\n//   };\n//   render() {\n//     const formElementsArray = [];\n//     for (let key in this.state.controls) {\n//       formElementsArray.push({\n//         id: key,\n//         config: this.state.controls[key],\n//       });\n//     }\n//     let form = formElementsArray.map((formElement) => {\n//       if (this.state.signupMode || !(formElement.id === \"name\")) {\n//         return (\n//           <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             invalid={!formElement.config.valid}\n//             shouldValidate={formElement.config.validation}\n//             touched={formElement.config.touched}\n//             changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//           />\n//         );\n//       }\n//       return null;\n//     });\n//     if (this.props.isLoading) {\n//       form = <Spinner />;\n//     }\n//     let errorMessage = null;\n//     if (this.state.error) {\n//       errorMessage = <p>{this.state.error.msg.msg}</p>;\n//     }\n//     let redirectTo = <Redirect to=\"/\" />;\n//     if (!this.props.isAuthenticated) {\n//       redirectTo = null;\n//     }\n//     return (\n//       <div className={classes.Auth}>\n//         {/* Redirect when successfull register */}\n//         {redirectTo}\n//         {errorMessage}\n//         <form onSubmit={this.submitHandler}>\n//           {form}\n//           <Button btnType={\"Success\"}>SUBMIT</Button>\n//         </form>\n//         <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//           SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//         </Button>\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = (state) => {\n//   return {\n//     isAuthenticated: state.auth.isAuthenticated,\n//     error: state.error,\n//     isLoading: state.auth.isLoading,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRegisterSubmit: (registrationInfo) =>\n//       dispatch(register(registrationInfo)),\n//     onLogoutSubmit: () => dispatch(logout()),\n//     onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n//\n//\n//\n//\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faUser, faEnvelope, faLock } from '@fortawesome/free-solid-svg-icons';\n\nvar auth = function auth(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      signupMode = _useState2[0],\n      setSingupMode = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      transitionClass = _useState4[0],\n      setTransitionClass = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\" // placeholder: \"Full Name\",\n\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 1\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\" // placeholder: \"Mail Address\",\n\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\" // placeholder: \"Password\",\n\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      controls = _useState8[0],\n      setControls = _useState8[1];\n\n  var didMount = useRef(false);\n  useEffect(function () {\n    console.log(\"useEffect1\");\n    props.onLogoutSubmit();\n  }, []);\n  useEffect(function () {\n    if (didMount.current) {\n      console.log(\"useEffect2\");\n\n      if (error !== props.error) {\n        if (props.error.id === \"REGISTER_FAIL\") {\n          setError(props.error);\n        } else if (props.error.id === \"LOGIN_FAIL\") {\n          setError(props.error);\n        } else {\n          setError(null);\n        }\n      }\n    } else {\n      didMount.current = true;\n    }\n  }, [props.error]);\n\n  var checkVaildity = function checkVaildity(value, rules) {\n    var isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  };\n\n  var inputChangedHandler = function inputChangedHandler(event, controlName) {\n    var updatedControls = _objectSpread({}, controls, _defineProperty({}, controlName, _objectSpread({}, controls[controlName], {\n      value: event.target.value,\n      valid: checkVaildity(event.target.value, controls[controlName].validation),\n      touched: true\n    }))); // console.log(this.state.controls.password)\n\n\n    setControls(updatedControls);\n  };\n\n  var submitHandler = function submitHandler(event) {\n    event.preventDefault();\n\n    if (signupMode) {\n      var registrationInfo = {\n        name: controls.name.value,\n        email: controls.email.value,\n        password: controls.password.value\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!signupMode) {\n      var loginInfo = {\n        email: controls.email.value,\n        password: controls.password.value\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  var switchAuthModeHandler = function switchAuthModeHandler() {\n    transitionToggler();\n    setSingupMode(!signupMode);\n    setError(null);\n  };\n\n  var formElementsArray = [];\n\n  for (var key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  var transitionToggler = function transitionToggler() {\n    setTransitionClass(!transitionClass);\n    console.log(transitionClass);\n  };\n\n  var form = formElementsArray.map(function (formElement) {\n    if (signupMode || !(formElement.id === \"name\")) {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: function changed(event) {\n          return inputChangedHandler(event, formElement.id);\n        },\n        label: formElement.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return null;\n  });\n\n  if (props.isLoading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var errorMessage = null;\n\n  if (error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 20\n      }\n    }, error.msg.msg);\n  }\n\n  var redirectTo = /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 20\n    }\n  });\n\n  if (!props.isAuthenticated) {\n    redirectTo = null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: [classes.Auth, transitionClass ? classes.Swipe : classes.Swipe2].join(' '),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 5\n    }\n  }, redirectTo, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }\n  }, signupMode ? 'SINGUP' : 'LOGIN'), errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Checkout_Login\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"# \",\n    onClick: switchAuthModeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }\n  }, signupMode ? \"SIGNUP\" : \"LOGIN\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegisterSubmit: function onRegisterSubmit(registrationInfo) {\n      return dispatch(register(registrationInfo));\n    },\n    onLogoutSubmit: function onLogoutSubmit() {\n      return dispatch(logout());\n    },\n    onLoginSubmit: function onLoginSubmit(loginInfo) {\n      return dispatch(login(loginInfo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","useRef","Input","Button","classes","connect","Spinner","register","logout","login","Redirect","library","faUser","faEnvelope","faLock","auth","props","signupMode","setSingupMode","transitionClass","setTransitionClass","error","setError","name","elementType","elementConfig","type","value","validation","required","minLength","valid","touched","email","isEmail","password","controls","setControls","didMount","console","log","onLogoutSubmit","current","id","checkVaildity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","registrationInfo","onRegisterSubmit","loginInfo","onLoginSubmit","switchAuthModeHandler","transitionToggler","formElementsArray","key","push","config","form","map","formElement","isLoading","errorMessage","msg","redirectTo","isAuthenticated","Auth","Swipe","Swipe2","join","Title","mapStateToProps","state","mapDispatchToProps","dispatch"],"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","sourcesContent":["// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n\n// class Auth extends Component {\n//   state = {\n//     signupMode: false,\n//     error: \"\",\n//     controls: {\n//       name: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"text\",\n//           placeholder: \"Full Name\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 1,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       email: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"email\",\n//           placeholder: \"Mail Address\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           isEmail: true,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       password: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"password\",\n//           placeholder: \"Password\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 6,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//     },\n//   };\n\n//   componentDidMount() {\n//     // Check if Logout pressed\n//     // if (this.props.isAuthenticated) {\n//     // this.props.onLogoutSubmit();\n//     // }\n//     console.log(\"componentDidMount[Orders]\");\n//     this.props.onLogoutSubmit();\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     console.log(\"componentDidUpdate[Orders]\");\n//     if (prevProps.error !== this.props.error) {\n//       if (this.props.error.id === \"REGISTER_FAIL\") {\n//         this.setState({ error: this.props.error });\n//       } else if (this.props.error.id === \"LOGIN_FAIL\") {\n//         this.setState({ error: this.props.error });\n//       } else {\n//         this.setState({ error: null });\n//       }\n//     }\n//   }\n\n//   checkVaildity = (value, rules) => {\n//     let isValid = true;\n//     if (rules.required) {\n//       isValid = value.trim() !== \"\" && isValid;\n//     }\n//     if (rules.minLength) {\n//       isValid = value.length >= rules.minLength && isValid;\n//     }\n//     if (rules.maxLength) {\n//       isValid = value.length <= rules.maxLength && isValid;\n//     }\n//     return isValid;\n//   };\n\n//   inputChangedHandler = (event, controlName) => {\n//     const updatedControls = {\n//       ...this.state.controls,\n//       [controlName]: {\n//         ...this.state.controls[controlName],\n//         value: event.target.value,\n//         valid: this.checkVaildity(\n//           event.target.value,\n//           this.state.controls[controlName].validation\n//         ),\n//         touched: true,\n//       },\n//     };\n//     // console.log(this.state.controls.password)\n//     this.setState({ controls: updatedControls });\n//   };\n\n//   submitHandler = (event) => {\n//     event.preventDefault();\n//     if (this.state.signupMode) {\n//       const registrationInfo = {\n//         name: this.state.controls.name.value,\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       this.props.onRegisterSubmit(registrationInfo);\n//     } else if (!this.state.signupMode) {\n//       const loginInfo = {\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       this.props.onLoginSubmit(loginInfo);\n//     }\n//   };\n\n//   switchAuthModeHandler = () => {\n//     this.setState((prevState) => {\n//       return { signupMode: !prevState.signupMode };\n//     });\n//   };\n\n//   render() {\n//     const formElementsArray = [];\n//     for (let key in this.state.controls) {\n//       formElementsArray.push({\n//         id: key,\n//         config: this.state.controls[key],\n//       });\n//     }\n\n//     let form = formElementsArray.map((formElement) => {\n//       if (this.state.signupMode || !(formElement.id === \"name\")) {\n//         return (\n//           <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             invalid={!formElement.config.valid}\n//             shouldValidate={formElement.config.validation}\n//             touched={formElement.config.touched}\n//             changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//           />\n//         );\n//       }\n//       return null;\n//     });\n\n//     if (this.props.isLoading) {\n//       form = <Spinner />;\n//     }\n//     let errorMessage = null;\n//     if (this.state.error) {\n//       errorMessage = <p>{this.state.error.msg.msg}</p>;\n//     }\n\n//     let redirectTo = <Redirect to=\"/\" />;\n//     if (!this.props.isAuthenticated) {\n//       redirectTo = null;\n//     }\n//     return (\n//       <div className={classes.Auth}>\n//         {/* Redirect when successfull register */}\n//         {redirectTo}\n\n//         {errorMessage}\n//         <form onSubmit={this.submitHandler}>\n//           {form}\n//           <Button btnType={\"Success\"}>SUBMIT</Button>\n//         </form>\n\n//         <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//           SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//         </Button>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     isAuthenticated: state.auth.isAuthenticated,\n//     error: state.error,\n//     isLoading: state.auth.isLoading,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRegisterSubmit: (registrationInfo) =>\n//       dispatch(register(registrationInfo)),\n//     onLogoutSubmit: () => dispatch(logout()),\n//     onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n//\n//\n//\n//\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faUser, faEnvelope, faLock} from '@fortawesome/free-solid-svg-icons'\n\n\n\n\nconst auth = (props) => {\n  const [signupMode, setSingupMode] = useState(false);\n  const [transitionClass, setTransitionClass] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [controls, setControls] = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        // placeholder: \"Full Name\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 1,\n      },\n      valid: false,\n      touched: false,\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        // placeholder: \"Mail Address\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        // placeholder: \"Password\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      valid: false,\n      touched: false,\n    },\n  });\n\n  let didMount = useRef(false);\n  useEffect(() => {\n    console.log(\"useEffect1\");\n    props.onLogoutSubmit();\n  }, []);\n\n  useEffect(() => {\n    if (didMount.current) {\n      console.log(\"useEffect2\");\n      if (error !== props.error) {\n        if (props.error.id === \"REGISTER_FAIL\") {\n          setError(props.error);\n        } else if (props.error.id === \"LOGIN_FAIL\") {\n          setError(props.error);\n        } else {\n          setError(null);\n        }\n      }\n    } else {\n      didMount.current = true;\n    }\n  },[props.error]);\n\n  const checkVaildity = (value, rules) => {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    return isValid;\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...controls,\n      [controlName]: {\n        ...controls[controlName],\n        value: event.target.value,\n        valid: checkVaildity(\n          event.target.value,\n          controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    // console.log(this.state.controls.password)\n    setControls(updatedControls );\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (signupMode) {\n      const registrationInfo = {\n        name: controls.name.value,\n        email: controls.email.value,\n        password: controls.password.value,\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!signupMode) {\n      const loginInfo = {\n        email: controls.email.value,\n        password: controls.password.value,\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  const switchAuthModeHandler = () => {\n    transitionToggler();\n    setSingupMode(!signupMode);\n    setError(null);\n  };\n\n  const formElementsArray = [];\n  for (let key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key],\n    });\n  }\n\n\n  const transitionToggler = () => {\n    setTransitionClass(!transitionClass);\n    console.log(transitionClass)\n  } \n\n  let form = formElementsArray.map((formElement) => {\n    if (signupMode || !(formElement.id === \"name\")) {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => inputChangedHandler(event, formElement.id)}\n          label={formElement.id}\n        />\n      );\n    }\n    return null;\n  });\n\n  if (props.isLoading) {\n    form = <Spinner />;\n  }\n  let errorMessage = null;\n  if (error) {\n    errorMessage = <p>{error.msg.msg}</p>;\n  }\n\n  let redirectTo = <Redirect to=\"/\" />;\n  if (!props.isAuthenticated) {\n    redirectTo = null;\n  }\n\n\n\n  return (\n    <div className={[classes.Auth, transitionClass ? classes.Swipe : classes.Swipe2 ].join(' ')}>\n      {/* Redirect when successfull register */}\n      {redirectTo}\n\n      <div className={classes.Title}>\n        {signupMode ? 'SINGUP' : 'LOGIN'}\n      </div>\n      {errorMessage}\n      <form onSubmit={submitHandler}>\n        {form}\n        <Button btnType={\"Checkout_Login\"}>SUBMIT</Button>\n      </form>\n\n      <a href='# ' onClick={switchAuthModeHandler} >\n        {signupMode ? \"SIGNUP\" : \"LOGIN\"}\n      </a>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRegisterSubmit: (registrationInfo) =>\n      dispatch(register(registrationInfo)),\n    onLogoutSubmit: () => dispatch(logout()),\n    onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);\n"]},"metadata":{},"sourceType":"module"}