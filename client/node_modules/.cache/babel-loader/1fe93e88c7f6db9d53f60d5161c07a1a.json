{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar updateDocuments = require('./common_functions').updateDocuments;\n\nvar hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nvar ReplaceOneOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(ReplaceOneOperation, _OperationBase);\n\n  function ReplaceOneOperation(collection, filter, replacement, options) {\n    var _this;\n\n    _classCallCheck(this, ReplaceOneOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReplaceOneOperation).call(this, options));\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    _this.collection = collection;\n    _this.filter = filter;\n    _this.replacement = replacement;\n    return _this;\n  }\n\n  _createClass(ReplaceOneOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var filter = this.filter;\n      var replacement = this.replacement;\n      var options = this.options; // Set single document update\n\n      options.multi = false; // Execute update\n\n      updateDocuments(coll, filter, replacement, options, function (err, r) {\n        return replaceCallback(err, r, replacement, callback);\n      });\n    }\n  }]);\n\n  return ReplaceOneOperation;\n}(OperationBase);\n\nfunction replaceCallback(err, r, doc, callback) {\n  if (callback == null) return;\n  if (err && callback) return callback(err);\n  if (r == null) return callback(null, {\n    result: {\n      ok: 1\n    }\n  });\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n  : null;\n  r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  r.ops = [doc]; // TODO: Should we still have this?\n\n  if (callback) callback(null, r);\n}\n\nmodule.exports = ReplaceOneOperation;","map":null,"metadata":{},"sourceType":"script"}