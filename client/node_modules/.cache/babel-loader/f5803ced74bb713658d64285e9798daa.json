{"ast":null,"code":"// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n// class Auth extends Component {\n//     state = {\n//         signupMode: false,\n//         error: \"\",\n//         controls: {\n//             name: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"text\",\n//                     placeholder: \"Full Name\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 1,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             email: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"email\",\n//                     placeholder: \"Mail Address\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     isEmail: true,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             password: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"password\",\n//                     placeholder: \"Password\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 6,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//         },\n//     };\n//     componentDidMount() {\n//         // Check if Logout pressed\n//         // if (this.props.isAuthenticated) {\n//             // this.props.onLogoutSubmit();\n//         // }\n//         console.log('componentDidMount[Orders]')\n//         this.props.onLogoutSubmit();\n//     }\n//     componentDidUpdate(prevProps) {\n//         console.log('componentDidUpdate[Orders]')\n//         if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"REGISTER_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n//         else if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"LOGIN_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n//     }\n//     checkVaildity = (value, rules) => {\n//         let isValid = true;\n//         if (rules.required) {\n//             isValid = value.trim() !== \"\" && isValid;\n//         }\n//         if (rules.minLength) {\n//             isValid = value.length >= rules.minLength && isValid;\n//         }\n//         if (rules.maxLength) {\n//             isValid = value.length <= rules.maxLength && isValid;\n//         }\n//         return isValid;\n//     };\n//     inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 valid: this.checkVaildity(\n//                     event.target.value,\n//                     this.state.controls[controlName].validation\n//                 ),\n//                 touched: true,\n//             },\n//         };\n//         // console.log(this.state.controls.password)\n//         this.setState({ controls: updatedControls });\n//     };\n//     submitHandler = (event) => {\n//         event.preventDefault();\n//         if (this.state.signupMode) {\n//             const registrationInfo = {\n//                 name: this.state.controls.name.value,\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onRegisterSubmit(registrationInfo);\n//         } else if (!this.state.signupMode) {\n//             const loginInfo = {\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onLoginSubmit(loginInfo);\n//         }\n//     };\n//     switchAuthModeHandler = () => {\n//         this.setState((prevState) => {\n//             return { signupMode: !prevState.signupMode };\n//         });\n//     };\n//     render() {\n//         const formElementsArray = [];\n//         for (let key in this.state.controls) {\n//             formElementsArray.push({\n//                 id: key,\n//                 config: this.state.controls[key],\n//             });\n//         }\n//         let form = formElementsArray.map((formElement) => {\n//             if (this.state.signupMode || !(formElement.id === \"name\")) {\n//                 return (\n//                     <Input\n//                         key={formElement.id}\n//                         elementType={formElement.config.elementType}\n//                         elementConfig={formElement.config.elementConfig}\n//                         value={formElement.config.value}\n//                         invalid={!formElement.config.valid}\n//                         shouldValidate={formElement.config.validation}\n//                         touched={formElement.config.touched}\n//                         changed={(event) =>\n//                             this.inputChangedHandler(event, formElement.id)\n//                         }\n//                     />\n//                 );\n//             }\n//             return null;\n//         });\n//         if (this.props.isLoading) {\n//             form = <Spinner />;\n//         }\n//         let errorMessage = null;\n//         if (this.state.error) {\n//             errorMessage = <p>{this.state.error.msg.msg}</p>;\n//         }\n//         let redirectTo = <Redirect to=\"/\" />;\n//         if (!this.props.isAuthenticated) {\n//             redirectTo = null;\n//         }\n//         return (\n//             <div className={classes.Auth}>\n//                 {/* Redirect when successfull register */}\n//                 {redirectTo}\n//                 {errorMessage}\n//                 <form onSubmit={this.submitHandler}>\n//                     {form}\n//                     <Button btnType={\"Success\"}>SUBMIT</Button>\n//                 </form>\n//                 <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//                     SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//                 </Button>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = (state) => {\n//     return {\n//         isAuthenticated: state.auth.isAuthenticated,\n//         error: state.error,\n//         isLoading: state.auth.isLoading,\n//     };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         onRegisterSubmit: (registrationInfo) =>\n//             dispatch(register(registrationInfo)),\n//         onLogoutSubmit: () => dispatch(logout()),\n//         onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//     };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n// ?","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n\n// class Auth extends Component {\n//     state = {\n//         signupMode: false,\n//         error: \"\",\n//         controls: {\n//             name: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"text\",\n//                     placeholder: \"Full Name\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 1,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             email: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"email\",\n//                     placeholder: \"Mail Address\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     isEmail: true,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//             password: {\n//                 elementType: \"input\",\n//                 elementConfig: {\n//                     type: \"password\",\n//                     placeholder: \"Password\",\n//                 },\n//                 value: \"\",\n//                 validation: {\n//                     required: true,\n//                     minLength: 6,\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             },\n//         },\n//     };\n\n//     componentDidMount() {\n//         // Check if Logout pressed\n//         // if (this.props.isAuthenticated) {\n//             // this.props.onLogoutSubmit();\n//         // }\n//         console.log('componentDidMount[Orders]')\n//         this.props.onLogoutSubmit();\n\n//     }\n\n//     componentDidUpdate(prevProps) {\n//         console.log('componentDidUpdate[Orders]')\n//         if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"REGISTER_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n//         else if (prevProps.error !== this.props.error) {\n//             if (this.props.error.id === \"LOGIN_FAIL\") {\n//                 this.setState({ error: this.props.error });\n//             } else {\n//                 this.setState({ error: null });\n//             }\n//         }\n\n//     }\n\n//     checkVaildity = (value, rules) => {\n//         let isValid = true;\n//         if (rules.required) {\n//             isValid = value.trim() !== \"\" && isValid;\n//         }\n//         if (rules.minLength) {\n//             isValid = value.length >= rules.minLength && isValid;\n//         }\n//         if (rules.maxLength) {\n//             isValid = value.length <= rules.maxLength && isValid;\n//         }\n//         return isValid;\n//     };\n\n//     inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 valid: this.checkVaildity(\n//                     event.target.value,\n//                     this.state.controls[controlName].validation\n//                 ),\n//                 touched: true,\n//             },\n//         };\n//         // console.log(this.state.controls.password)\n//         this.setState({ controls: updatedControls });\n//     };\n\n//     submitHandler = (event) => {\n//         event.preventDefault();\n//         if (this.state.signupMode) {\n//             const registrationInfo = {\n//                 name: this.state.controls.name.value,\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onRegisterSubmit(registrationInfo);\n//         } else if (!this.state.signupMode) {\n//             const loginInfo = {\n//                 email: this.state.controls.email.value,\n//                 password: this.state.controls.password.value,\n//             };\n//             this.props.onLoginSubmit(loginInfo);\n//         }\n//     };\n\n//     switchAuthModeHandler = () => {\n//         this.setState((prevState) => {\n//             return { signupMode: !prevState.signupMode };\n//         });\n//     };\n\n//     render() {\n//         const formElementsArray = [];\n//         for (let key in this.state.controls) {\n//             formElementsArray.push({\n//                 id: key,\n//                 config: this.state.controls[key],\n//             });\n//         }\n\n//         let form = formElementsArray.map((formElement) => {\n//             if (this.state.signupMode || !(formElement.id === \"name\")) {\n//                 return (\n//                     <Input\n//                         key={formElement.id}\n//                         elementType={formElement.config.elementType}\n//                         elementConfig={formElement.config.elementConfig}\n//                         value={formElement.config.value}\n//                         invalid={!formElement.config.valid}\n//                         shouldValidate={formElement.config.validation}\n//                         touched={formElement.config.touched}\n//                         changed={(event) =>\n//                             this.inputChangedHandler(event, formElement.id)\n//                         }\n//                     />\n//                 );\n//             }\n//             return null;\n//         });\n\n//         if (this.props.isLoading) {\n//             form = <Spinner />;\n//         }\n//         let errorMessage = null;\n//         if (this.state.error) {\n//             errorMessage = <p>{this.state.error.msg.msg}</p>;\n//         }\n\n//         let redirectTo = <Redirect to=\"/\" />;\n//         if (!this.props.isAuthenticated) {\n//             redirectTo = null;\n//         }\n//         return (\n//             <div className={classes.Auth}>\n//                 {/* Redirect when successfull register */}\n//                 {redirectTo}\n\n//                 {errorMessage}\n//                 <form onSubmit={this.submitHandler}>\n//                     {form}\n//                     <Button btnType={\"Success\"}>SUBMIT</Button>\n//                 </form>\n\n//                 <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//                     SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//                 </Button>\n//             </div>\n//         );\n//     }\n// }\n\n// const mapStateToProps = (state) => {\n//     return {\n//         isAuthenticated: state.auth.isAuthenticated,\n//         error: state.error,\n//         isLoading: state.auth.isLoading,\n//     };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         onRegisterSubmit: (registrationInfo) =>\n//             dispatch(register(registrationInfo)),\n//         onLogoutSubmit: () => dispatch(logout()),\n//         onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//     };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n// ?\n\n"]},"metadata":{},"sourceType":"module"}