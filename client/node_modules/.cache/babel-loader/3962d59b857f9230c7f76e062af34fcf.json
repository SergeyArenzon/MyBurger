{"ast":null,"code":"import _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Checkout/ContactData/ContactData.js\";\n\nimport React, { Component, useState } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport Authentication from \"../../Auth/Auth\";\n\nvar contactData = function contactData(props) {\n  var _useState = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Your Name\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Street\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"ZIP Code\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Country\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Your Email\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: \"select\",\n      elementConfig: {\n        options: [{\n          value: \"fastest\",\n          displayValue: \"Fastest\"\n        }, {\n          value: \"cheapest\",\n          displayValue: \"Cheapest\"\n        }],\n        placeholder: \"ZIP Code\"\n      },\n      validation: {\n        required: false\n      },\n      value: \"fastest\",\n      valid: true,\n      touched: false\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      orderForm = _useState2[0],\n      setOrderForm = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formisValid = _useState4[0],\n      setFormisValid = _useState4[1];\n\n  var orderHandler = function orderHandler(event) {\n    event.preventDefault();\n    var formData = {};\n\n    for (var formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    var ingredients = props.ings;\n    var price = props.price; //   push new order\n\n    var order = {\n      userId: props.auth.user._id,\n      ingredients: ingredients,\n      price: price.toFixed(2),\n      orderData: formData\n    };\n    console.log(order);\n    props.onOrderBurger(order); // props.history.push(\"/\");\n  };\n\n  var checkVaildity = function checkVaildity(value, rules) {\n    var isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    console.log(value);\n    return isValid;\n  };\n\n  var inputChangedHandle = function inputChangedHandle(event, inputIdentifier) {\n    var updatedOrderForm = _objectSpread({}, orderForm);\n\n    var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = _this.checkVaildity(updatedFormElement.value, updatedFormElement.validation);\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    updatedFormElement.touched = true;\n    var formIsValid = true;\n\n    for (var key in updatedOrderForm) {\n      formIsValid = updatedOrderForm[key].valid && formIsValid;\n    }\n\n    console.log(updatedFormElement);\n\n    _this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  };\n\n  var formElementsArray = [];\n\n  for (var key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  var form = null;\n\n  if (props.loading) {\n    console.log('---------------spinner-------------------');\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 20\n      }\n    });\n  } else if (!props.auth.isAuthenticated) {\n    form = /*#__PURE__*/React.createElement(Authentication, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 20\n      }\n    });\n  } else {\n    form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: _this.orderHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, formElementsArray.map(function (formElement) {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.value,\n        invalid: !formElement.config.valid,\n        changed: function changed(event) {\n          return _this.inputChangedHandle(event, formElement.id);\n        },\n        touched: formElement.config.touched,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      });\n    }), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !_this.state.formIsValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }, \"ORDER\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 16\n    }\n  }, form);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","useState","Button","classes","Spinner","Input","connect","actions","Authentication","contactData","props","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formisValid","setFormisValid","orderHandler","event","preventDefault","formData","formElementIdentifier","ingredients","ings","price","order","userId","auth","user","_id","toFixed","orderData","console","log","onOrderBurger","checkVaildity","rules","isValid","trim","length","inputChangedHandle","inputIdentifier","updatedOrderForm","updatedFormElement","target","formIsValid","key","setState","formElementsArray","push","id","config","form","loading","isAuthenticated","map","formElement","state","ContactData","mapStateToProps","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/index\";\nimport Authentication from \"../../Auth/Auth\";\n\nconst contactData = props => {\n\n    const [orderForm, setOrderForm] = useState ({\n            name: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Your Name\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Street\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            zipCode: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"ZIP Code\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Country\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Your Email\",\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            deliveryMethod: {\n                elementType: \"select\",\n                elementConfig: {\n                    options: [\n                        { value: \"fastest\", displayValue: \"Fastest\" },\n                        { value: \"cheapest\", displayValue: \"Cheapest\" },\n                    ],\n                    placeholder: \"ZIP Code\",\n                },\n                validation: { required: false },\n                value: \"fastest\",\n                valid: true,\n                touched: false,\n            }}\n        )\n\n    const [formisValid, setFormisValid] = useState(false);\n    \n    const orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[\n                formElementIdentifier\n            ].value;\n        }\n\n        const ingredients = props.ings;\n        const price = props.price;\n\n        //   push new order\n\n        const order = {\n            userId: props.auth.user._id,\n            ingredients: ingredients,\n            price: price.toFixed(2),\n            orderData: formData,\n        };\n\n        console.log(order);\n        props.onOrderBurger(order);\n        // props.history.push(\"/\");\n    };\n\n    const checkVaildity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== \"\" && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        console.log(value);\n        return isValid;\n    };\n\n    const inputChangedHandle = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...orderForm,\n        };\n\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier],\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkVaildity(\n            updatedFormElement.value,\n            updatedFormElement.validation\n        );\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        updatedFormElement.touched = true;\n\n        let formIsValid = true;\n\n        for (let key in updatedOrderForm) {\n            formIsValid = updatedOrderForm[key].valid && formIsValid;\n        }\n\n        console.log(updatedFormElement);\n\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid,\n        });\n    };\n        const formElementsArray = [];\n        for (let key in orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: orderForm[key],\n            });\n        }\n        let form = null;\n\n        if (props.loading) {\n            console.log('---------------spinner-------------------')\n            form = <Spinner />;\n        } else if (!props.auth.isAuthenticated) {\n            form = <Authentication />;\n        } else {\n            form = (\n                <form onSubmit={this.orderHandler}>\n                    {formElementsArray.map((formElement) => {\n                        return (\n                            <Input\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.value}\n                                invalid={!formElement.config.valid}\n                                changed={(event) =>\n                                    this.inputChangedHandle(\n                                        event,\n                                        formElement.id\n                                    )\n                                }\n                                touched={formElement.config.touched}\n                            />\n                        );\n                    })}\n\n                    <Button\n                        btnType=\"Success\"\n                        disabled={!this.state.formIsValid}\n                    >\n                        ORDER\n                    </Button>\n                </form>\n            );\n        }\n\n        return <div className={classes.ContactData}>{form}</div>;\n    \n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        auth: state.auth,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onOrderBurger: (orderData) =>\n            dispatch(actions.purchaseBurger(orderData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);\n"]},"metadata":{},"sourceType":"module"}