{"ast":null,"code":"import _defineProperty from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js\";\n\n// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n// class Auth extends Component {\n//   state = {\n//     signupMode: false,\n//     error: \"\",\n//     controls: {\n//       name: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"text\",\n//           placeholder: \"Full Name\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 1,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       email: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"email\",\n//           placeholder: \"Mail Address\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           isEmail: true,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       password: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"password\",\n//           placeholder: \"Password\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 6,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//     },\n//   };\n//   componentDidMount() {\n//     // Check if Logout pressed\n//     // if (props.isAuthenticated) {\n//     // props.onLogoutSubmit();\n//     // }\n//     console.log(\"componentDidMount[Orders]\");\n//     props.onLogoutSubmit();\n//   }\n//   componentDidUpdate(prevProps) {\n//     console.log(\"componentDidUpdate[Orders]\");\n//     if (prevProps.error !== props.error) {\n//       if (props.error.id === \"REGISTER_FAIL\") {\n//         this.setState({ error: props.error });\n//       } else {\n//         this.setState({ error: null });\n//       }\n//     }\n//     if (prevProps.error !== props.error) {\n//       if (props.error.id === \"LOGIN_FAIL\") {\n//         this.setState({ error: props.error });\n//       } else {\n//         this.setState({ error: null });\n//       }\n//     }\n//   }\n//   checkVaildity = (value, rules) => {\n//     let isValid = true;\n//     if (rules.required) {\n//       isValid = value.trim() !== \"\" && isValid;\n//     }\n//     if (rules.minLength) {\n//       isValid = value.length >= rules.minLength && isValid;\n//     }\n//     if (rules.maxLength) {\n//       isValid = value.length <= rules.maxLength && isValid;\n//     }\n//     return isValid;\n//   };\n//   inputChangedHandler = (event, controlName) => {\n//     const updatedControls = {\n//       ...this.state.controls,\n//       [controlName]: {\n//         ...this.state.controls[controlName],\n//         value: event.target.value,\n//         valid: this.checkVaildity(\n//           event.target.value,\n//           this.state.controls[controlName].validation\n//         ),\n//         touched: true,\n//       },\n//     };\n//     // console.log(this.state.controls.password)\n//     this.setState({ controls: updatedControls });\n//   };\n//   submitHandler = (event) => {\n//     event.preventDefault();\n//     if (this.state.signupMode) {\n//       const registrationInfo = {\n//         name: this.state.controls.name.value,\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       props.onRegisterSubmit(registrationInfo);\n//     } else if (!this.state.signupMode) {\n//       const loginInfo = {\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       props.onLoginSubmit(loginInfo);\n//     }\n//   };\n//   switchAuthModeHandler = () => {\n//     this.setState((prevState) => {\n//       return { signupMode: !prevState.signupMode };\n//     });\n//   };\n//   render() {\n//     const formElementsArray = [];\n//     for (let key in this.state.controls) {\n//       formElementsArray.push({\n//         id: key,\n//         config: this.state.controls[key],\n//       });\n//     }\n//     let form = formElementsArray.map((formElement) => {\n//       if (this.state.signupMode || !(formElement.id === \"name\")) {\n//         return (\n//           <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             invalid={!formElement.config.valid}\n//             shouldValidate={formElement.config.validation}\n//             touched={formElement.config.touched}\n//             changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//           />\n//         );\n//       }\n//       return null;\n//     });\n//     if (props.isLoading) {\n//       form = <Spinner />;\n//     }\n//     let errorMessage = null;\n//     if (this.state.error) {\n//       errorMessage = <p>{this.state.error.msg.msg}</p>;\n//     }\n//     let redirectTo = <Redirect to=\"/\" />;\n//     if (!props.isAuthenticated) {\n//       redirectTo = null;\n//     }\n//     return (\n//       <div className={classes.Auth}>\n//         {/* Redirect when successfull register */}\n//         {redirectTo}\n//         {errorMessage}\n//         <form onSubmit={this.submitHandler}>\n//           {form}\n//           <Button btnType={\"Success\"}>SUBMIT</Button>\n//         </form>\n//         <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//           SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//         </Button>\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = (state) => {\n//   return {\n//     isAuthenticated: state.auth.isAuthenticated,\n//     error: state.error,\n//     isLoading: state.auth.isLoading,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRegisterSubmit: (registrationInfo) =>\n//       dispatch(register(registrationInfo)),\n//     onLogoutSubmit: () => dispatch(logout()),\n//     onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\nimport React, { useState, useEffect } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nvar auth = function auth(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      signupMode = _useState2[0],\n      setSignupMode = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Full Name\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 1\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Mail Address\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      controls = _useState6[0],\n      setControls = _useState6[1];\n\n  var didMountRef = useRef(false);\n  useState(function () {\n    // Check if Logout pressed\n    // if (props.isAuthenticated) {\n    // props.onLogoutSubmit();\n    // }\n    if (didMountRef.current) {\n      console.log(\"componentDidUpdate[Orders]\");\n\n      if (error !== props.error) {\n        if (props.error.id === \"REGISTER_FAIL\") {\n          setError(props.error);\n        } else {\n          setError(null);\n        }\n      }\n\n      if (error !== props.error) {\n        if (props.error.id === \"LOGIN_FAIL\") {\n          setError(props.error);\n        } else {\n          setError(null);\n        }\n      }\n    } else {\n      didMountRef.current = true;\n      console.log(\"componentDidMount[Orders]\");\n      props.onLogoutSubmit();\n    }\n\n    ;\n  }, []);\n\n  checkVaildity = function checkVaildity(value, rules) {\n    var isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  };\n\n  inputChangedHandler = function inputChangedHandler(event, controlName) {\n    var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n      value: event.target.value,\n      valid: _this.checkVaildity(event.target.value, _this.state.controls[controlName].validation),\n      touched: true\n    }))); // console.log(this.state.controls.password)\n\n\n    _this.setState({\n      controls: updatedControls\n    });\n  };\n\n  submitHandler = function submitHandler(event) {\n    event.preventDefault();\n\n    if (_this.state.signupMode) {\n      var registrationInfo = {\n        name: _this.state.controls.name.value,\n        email: _this.state.controls.email.value,\n        password: _this.state.controls.password.value\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!_this.state.signupMode) {\n      var loginInfo = {\n        email: _this.state.controls.email.value,\n        password: _this.state.controls.password.value\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  switchAuthModeHandler = function switchAuthModeHandler() {\n    _this.setState(function (prevState) {\n      return {\n        signupMode: !prevState.signupMode\n      };\n    });\n  };\n\n  var formElementsArray = [];\n\n  for (var key in _this.state.controls) {\n    formElementsArray.push({\n      id: key,\n      config: _this.state.controls[key]\n    });\n  }\n\n  var form = formElementsArray.map(function (formElement) {\n    if (_this.state.signupMode || !(formElement.id === \"name\")) {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: function changed(event) {\n          return _this.inputChangedHandler(event, formElement.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }\n      });\n    }\n\n    return null;\n  });\n\n  if (props.isLoading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 14\n      }\n    });\n  }\n\n  var errorMessage = null;\n\n  if (_this.state.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 22\n      }\n    }, _this.state.error.msg.msg);\n  }\n\n  var redirectTo = /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 22\n    }\n  });\n\n  if (!props.isAuthenticated) {\n    redirectTo = null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }\n  }, redirectTo, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: _this.submitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 11\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Danger\",\n    clicked: _this.switchAuthModeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }\n  }, \"SWITCH TO \", _this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegisterSubmit: function onRegisterSubmit(registrationInfo) {\n      return dispatch(register(registrationInfo));\n    },\n    onLogoutSubmit: function onLogoutSubmit() {\n      return dispatch(logout());\n    },\n    onLoginSubmit: function onLoginSubmit(loginInfo) {\n      return dispatch(login(loginInfo));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","Input","Button","classes","connect","Spinner","register","logout","login","Redirect","auth","props","signupMode","setSignupMode","error","setError","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","email","isEmail","password","controls","setControls","didMountRef","useRef","current","console","log","id","onLogoutSubmit","checkVaildity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","state","target","setState","submitHandler","preventDefault","registrationInfo","onRegisterSubmit","loginInfo","onLoginSubmit","switchAuthModeHandler","prevState","formElementsArray","key","push","config","form","map","formElement","isLoading","errorMessage","msg","redirectTo","isAuthenticated","Auth","mapStateToProps","mapDispatchToProps","dispatch"],"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","sourcesContent":["\n\n// import React, { Component } from \"react\";\n// import Input from \"../../components/UI/Input/Input\";\n// import Button from \"../../components/UI/Button/Button\";\n// import classes from \"./Auth.module.css\";\n// import { connect } from \"react-redux\";\n// import Spinner from \"../../components/UI/Spinner/Spinner\";\n// import { register, logout, login } from \"../../store/actions/auth\";\n// import { Redirect } from \"react-router-dom\";\n\n// class Auth extends Component {\n//   state = {\n//     signupMode: false,\n//     error: \"\",\n//     controls: {\n//       name: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"text\",\n//           placeholder: \"Full Name\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 1,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       email: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"email\",\n//           placeholder: \"Mail Address\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           isEmail: true,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//       password: {\n//         elementType: \"input\",\n//         elementConfig: {\n//           type: \"password\",\n//           placeholder: \"Password\",\n//         },\n//         value: \"\",\n//         validation: {\n//           required: true,\n//           minLength: 6,\n//         },\n//         valid: false,\n//         touched: false,\n//       },\n//     },\n//   };\n\n//   componentDidMount() {\n//     // Check if Logout pressed\n//     // if (props.isAuthenticated) {\n//     // props.onLogoutSubmit();\n//     // }\n//     console.log(\"componentDidMount[Orders]\");\n//     props.onLogoutSubmit();\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     console.log(\"componentDidUpdate[Orders]\");\n//     if (prevProps.error !== props.error) {\n//       if (props.error.id === \"REGISTER_FAIL\") {\n//         this.setState({ error: props.error });\n//       } else {\n//         this.setState({ error: null });\n//       }\n//     }\n//     if (prevProps.error !== props.error) {\n//       if (props.error.id === \"LOGIN_FAIL\") {\n//         this.setState({ error: props.error });\n//       } else {\n//         this.setState({ error: null });\n//       }\n//     }\n//   }\n\n//   checkVaildity = (value, rules) => {\n//     let isValid = true;\n//     if (rules.required) {\n//       isValid = value.trim() !== \"\" && isValid;\n//     }\n//     if (rules.minLength) {\n//       isValid = value.length >= rules.minLength && isValid;\n//     }\n//     if (rules.maxLength) {\n//       isValid = value.length <= rules.maxLength && isValid;\n//     }\n//     return isValid;\n//   };\n\n//   inputChangedHandler = (event, controlName) => {\n//     const updatedControls = {\n//       ...this.state.controls,\n//       [controlName]: {\n//         ...this.state.controls[controlName],\n//         value: event.target.value,\n//         valid: this.checkVaildity(\n//           event.target.value,\n//           this.state.controls[controlName].validation\n//         ),\n//         touched: true,\n//       },\n//     };\n//     // console.log(this.state.controls.password)\n//     this.setState({ controls: updatedControls });\n//   };\n\n//   submitHandler = (event) => {\n//     event.preventDefault();\n//     if (this.state.signupMode) {\n//       const registrationInfo = {\n//         name: this.state.controls.name.value,\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       props.onRegisterSubmit(registrationInfo);\n//     } else if (!this.state.signupMode) {\n//       const loginInfo = {\n//         email: this.state.controls.email.value,\n//         password: this.state.controls.password.value,\n//       };\n//       props.onLoginSubmit(loginInfo);\n//     }\n//   };\n\n//   switchAuthModeHandler = () => {\n//     this.setState((prevState) => {\n//       return { signupMode: !prevState.signupMode };\n//     });\n//   };\n\n//   render() {\n//     const formElementsArray = [];\n//     for (let key in this.state.controls) {\n//       formElementsArray.push({\n//         id: key,\n//         config: this.state.controls[key],\n//       });\n//     }\n\n//     let form = formElementsArray.map((formElement) => {\n//       if (this.state.signupMode || !(formElement.id === \"name\")) {\n//         return (\n//           <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             invalid={!formElement.config.valid}\n//             shouldValidate={formElement.config.validation}\n//             touched={formElement.config.touched}\n//             changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//           />\n//         );\n//       }\n//       return null;\n//     });\n\n//     if (props.isLoading) {\n//       form = <Spinner />;\n//     }\n//     let errorMessage = null;\n//     if (this.state.error) {\n//       errorMessage = <p>{this.state.error.msg.msg}</p>;\n//     }\n\n//     let redirectTo = <Redirect to=\"/\" />;\n//     if (!props.isAuthenticated) {\n//       redirectTo = null;\n//     }\n//     return (\n//       <div className={classes.Auth}>\n//         {/* Redirect when successfull register */}\n//         {redirectTo}\n\n//         {errorMessage}\n//         <form onSubmit={this.submitHandler}>\n//           {form}\n//           <Button btnType={\"Success\"}>SUBMIT</Button>\n//         </form>\n\n//         <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n//           SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n//         </Button>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     isAuthenticated: state.auth.isAuthenticated,\n//     error: state.error,\n//     isLoading: state.auth.isLoading,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onRegisterSubmit: (registrationInfo) =>\n//       dispatch(register(registrationInfo)),\n//     onLogoutSubmit: () => dispatch(logout()),\n//     onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { register, logout, login } from \"../../store/actions/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nconst auth = props => {\n    const [signupMode, setSignupMode] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [controls, setControls] = useState ({\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Full Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 1,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    })\n  \n  const didMountRef = useRef(false);\n  useState(() => {\n    // Check if Logout pressed\n    // if (props.isAuthenticated) {\n    // props.onLogoutSubmit();\n    // }\n    if(didMountRef.current ) {\n        console.log(\"componentDidUpdate[Orders]\");\n        if (error !== props.error) {\n          if (props.error.id === \"REGISTER_FAIL\") {\n            setError(props.error);\n          } else {\n            setError(null);\n          }\n        }\n        if (error !== props.error) {\n          if (props.error.id === \"LOGIN_FAIL\") {\n            setError(props.error);\n          } else {\n            setError(null);\n          }\n        }\n    }\n    else {\n        didMountRef.current = true\n        console.log(\"componentDidMount[Orders]\");\n        props.onLogoutSubmit()\n    }\n    ;\n  }, []);\n\n\n\n  checkVaildity = (value, rules) => {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    return isValid;\n  };\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkVaildity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    // console.log(this.state.controls.password)\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    if (this.state.signupMode) {\n      const registrationInfo = {\n        name: this.state.controls.name.value,\n        email: this.state.controls.email.value,\n        password: this.state.controls.password.value,\n      };\n      props.onRegisterSubmit(registrationInfo);\n    } else if (!this.state.signupMode) {\n      const loginInfo = {\n        email: this.state.controls.email.value,\n        password: this.state.controls.password.value,\n      };\n      props.onLoginSubmit(loginInfo);\n    }\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { signupMode: !prevState.signupMode };\n    });\n  };\n\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => {\n      if (this.state.signupMode || !(formElement.id === \"name\")) {\n        return (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        );\n      }\n      return null;\n    });\n\n    if (props.isLoading) {\n      form = <Spinner />;\n    }\n    let errorMessage = null;\n    if (this.state.error) {\n      errorMessage = <p>{this.state.error.msg.msg}</p>;\n    }\n\n    let redirectTo = <Redirect to=\"/\" />;\n    if (!props.isAuthenticated) {\n      redirectTo = null;\n    }\n    return (\n      <div className={classes.Auth}>\n        {/* Redirect when successfull register */}\n        {redirectTo}\n\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType={\"Success\"}>SUBMIT</Button>\n        </form>\n\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.signupMode ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </div>\n    );\n  \n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error,\n    isLoading: state.auth.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRegisterSubmit: (registrationInfo) =>\n      dispatch(register(registrationInfo)),\n    onLogoutSubmit: () => dispatch(logout()),\n    onLoginSubmit: (loginInfo) => dispatch(login(loginInfo)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}