{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar CommandOperationV2 = require('./command_v2');\n\nvar MongoError = require('../core').MongoError;\n\nvar parseIndexOptions = require('../utils').parseIndexOptions;\n\nvar maxWireVersion = require('../core/utils').maxWireVersion;\n\nvar VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'expireAfterSeconds', 'storageEngine', 'collation', // text indexes\n'weights', 'default_language', 'language_override', 'textIndexVersion', // 2d-sphere indexes\n'2dsphereIndexVersion', // 2d indexes\n'bits', 'min', 'max', // geoHaystack Indexes\n'bucketSize', // wildcard indexes\n'wildcardProjection']);\n\nvar CreateIndexesOperation = /*#__PURE__*/function (_CommandOperationV) {\n  _inherits(CreateIndexesOperation, _CommandOperationV);\n\n  /**\n   * @ignore\n   */\n  function CreateIndexesOperation(parent, collection, indexes, options) {\n    var _this;\n\n    _classCallCheck(this, CreateIndexesOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateIndexesOperation).call(this, parent, options));\n    _this.collection = collection; // createIndex can be called with a variety of styles:\n    //   coll.createIndex('a');\n    //   coll.createIndex({ a: 1 });\n    //   coll.createIndex([['a', 1]]);\n    // createIndexes is always called with an array of index spec objects\n\n    if (!Array.isArray(indexes) || Array.isArray(indexes[0])) {\n      _this.onlyReturnNameOfCreatedIndex = true; // TODO: remove in v4 (breaking change); make createIndex return full response as createIndexes does\n\n      var indexParameters = parseIndexOptions(indexes); // Generate the index name\n\n      var name = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index\n\n      var indexSpec = {\n        name: name,\n        key: indexParameters.fieldHash\n      }; // merge valid index options into the index spec\n\n      for (var optionName in options) {\n        if (VALID_INDEX_OPTIONS.has(optionName)) {\n          indexSpec[optionName] = options[optionName];\n        }\n      }\n\n      _this.indexes = [indexSpec];\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.indexes = indexes;\n    return _this;\n  }\n  /**\n   * @ignore\n   */\n\n\n  _createClass(CreateIndexesOperation, [{\n    key: \"execute\",\n    value: function execute(server, callback) {\n      var _this2 = this;\n\n      var options = this.options;\n      var indexes = this.indexes;\n      var serverWireVersion = maxWireVersion(server); // Ensure we generate the correct name if the parameter is not set\n\n      for (var i = 0; i < indexes.length; i++) {\n        // Did the user pass in a collation, check if our write server supports it\n        if (indexes[i].collation && serverWireVersion < 5) {\n          callback(new MongoError(\"Server \".concat(server.name, \", which reports wire version \").concat(serverWireVersion, \", does not support collation\")));\n          return;\n        }\n\n        if (indexes[i].name == null) {\n          var keys = [];\n\n          for (var name in indexes[i].key) {\n            keys.push(\"\".concat(name, \"_\").concat(indexes[i].key[name]));\n          } // Set the name\n\n\n          indexes[i].name = keys.join('_');\n        }\n      }\n\n      var cmd = {\n        createIndexes: this.collection,\n        indexes: indexes\n      };\n\n      if (options.commitQuorum != null) {\n        if (serverWireVersion < 9) {\n          callback(new MongoError('`commitQuorum` option for `createIndexes` not supported on servers < 4.4'));\n          return;\n        }\n\n        cmd.commitQuorum = options.commitQuorum;\n      } // collation is set on each index, it should not be defined at the root\n\n\n      this.options.collation = undefined;\n\n      _get(_getPrototypeOf(CreateIndexesOperation.prototype), \"executeCommand\", this).call(this, server, cmd, function (err, result) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(null, _this2.onlyReturnNameOfCreatedIndex ? indexes[0].name : result);\n      });\n    }\n  }]);\n\n  return CreateIndexesOperation;\n}(CommandOperationV2);\n\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = CreateIndexesOperation;","map":null,"metadata":{},"sourceType":"script"}