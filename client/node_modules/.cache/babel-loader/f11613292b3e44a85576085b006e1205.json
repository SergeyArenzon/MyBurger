{"ast":null,"code":"'use strict';\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar Connection = require('./connection');\n\nvar MongoError = require('../error').MongoError;\n\nvar MongoNetworkError = require('../error').MongoNetworkError;\n\nvar MongoNetworkTimeoutError = require('../error').MongoNetworkTimeoutError;\n\nvar defaultAuthProviders = require('../auth/defaultAuthProviders').defaultAuthProviders;\n\nvar AuthContext = require('../auth/auth_provider').AuthContext;\n\nvar WIRE_CONSTANTS = require('../wireprotocol/constants');\n\nvar makeClientMetadata = require('../utils').makeClientMetadata;\n\nvar MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nvar MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nvar MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nvar MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nvar AUTH_PROVIDERS;\n\nfunction connect(options, cancellationToken, callback) {\n  if (typeof cancellationToken === 'function') {\n    callback = cancellationToken;\n    cancellationToken = undefined;\n  }\n\n  var ConnectionType = options && options.connectionType ? options.connectionType : Connection;\n\n  if (AUTH_PROVIDERS == null) {\n    AUTH_PROVIDERS = defaultAuthProviders(options.bson);\n  }\n\n  var family = options.family !== void 0 ? options.family : 0;\n  makeConnection(family, options, cancellationToken, function (err, socket) {\n    if (err) {\n      callback(err, socket); // in the error case, `socket` is the originating error event name\n\n      return;\n    }\n\n    performInitialHandshake(new ConnectionType(socket, options), options, callback);\n  });\n}\n\nfunction isModernConnectionType(conn) {\n  return !(conn instanceof Connection);\n}\n\nfunction checkSupportedServer(ismaster, options) {\n  var serverVersionHighEnough = ismaster && typeof ismaster.maxWireVersion === 'number' && ismaster.maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;\n  var serverVersionLowEnough = ismaster && typeof ismaster.minWireVersion === 'number' && ismaster.minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;\n\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n\n    var _message = \"Server at \".concat(options.host, \":\").concat(options.port, \" reports minimum wire version \").concat(ismaster.minWireVersion, \", but this version of the Node.js Driver requires at most \").concat(MAX_SUPPORTED_WIRE_VERSION, \" (MongoDB \").concat(MAX_SUPPORTED_SERVER_VERSION, \")\");\n\n    return new MongoError(_message);\n  }\n\n  var message = \"Server at \".concat(options.host, \":\").concat(options.port, \" reports maximum wire version \").concat(ismaster.maxWireVersion || 0, \", but this version of the Node.js Driver requires at least \").concat(MIN_SUPPORTED_WIRE_VERSION, \" (MongoDB \").concat(MIN_SUPPORTED_SERVER_VERSION, \")\");\n  return new MongoError(message);\n}\n\nfunction performInitialHandshake(conn, options, _callback) {\n  var callback = function callback(err, ret) {\n    if (err && conn) {\n      conn.destroy();\n    }\n\n    _callback(err, ret);\n  };\n\n  var credentials = options.credentials;\n\n  if (credentials) {\n    if (!credentials.mechanism.match(/DEFAULT/i) && !AUTH_PROVIDERS[credentials.mechanism]) {\n      callback(new MongoError(\"authMechanism '\".concat(credentials.mechanism, \"' not supported\")));\n      return;\n    }\n  }\n\n  var authContext = new AuthContext(conn, credentials, options);\n  prepareHandshakeDocument(authContext, function (err, handshakeDoc) {\n    if (err) {\n      return callback(err);\n    }\n\n    var handshakeOptions = Object.assign({}, options);\n\n    if (options.connectTimeoutMS || options.connectionTimeout) {\n      // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n      handshakeOptions.socketTimeout = options.connectTimeoutMS || options.connectionTimeout;\n    }\n\n    var start = new Date().getTime();\n    conn.command('admin.$cmd', handshakeDoc, handshakeOptions, function (err, result) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      var response = result.result;\n\n      if (response.ok === 0) {\n        callback(new MongoError(response));\n        return;\n      }\n\n      var supportedServerErr = checkSupportedServer(response, options);\n\n      if (supportedServerErr) {\n        callback(supportedServerErr);\n        return;\n      }\n\n      if (!isModernConnectionType(conn)) {\n        // resolve compression\n        if (response.compression) {\n          var agreedCompressors = handshakeDoc.compression.filter(function (compressor) {\n            return response.compression.indexOf(compressor) !== -1;\n          });\n\n          if (agreedCompressors.length) {\n            conn.agreedCompressor = agreedCompressors[0];\n          }\n\n          if (options.compression && options.compression.zlibCompressionLevel) {\n            conn.zlibCompressionLevel = options.compression.zlibCompressionLevel;\n          }\n        }\n      } // NOTE: This is metadata attached to the connection while porting away from\n      //       handshake being done in the `Server` class. Likely, it should be\n      //       relocated, or at very least restructured.\n\n\n      conn.ismaster = response;\n      conn.lastIsMasterMS = new Date().getTime() - start;\n\n      if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        Object.assign(authContext, {\n          response: response\n        });\n        var resolvedCredentials = credentials.resolveAuthMechanism(response);\n        var authProvider = AUTH_PROVIDERS[resolvedCredentials.mechanism];\n        authProvider.auth(authContext, function (err) {\n          if (err) return callback(err);\n          callback(undefined, conn);\n        });\n        return;\n      }\n\n      callback(undefined, conn);\n    });\n  });\n}\n\nfunction prepareHandshakeDocument(authContext, callback) {\n  var options = authContext.options;\n  var compressors = options.compression && options.compression.compressors ? options.compression.compressors : [];\n  var handshakeDoc = {\n    ismaster: true,\n    client: options.metadata || makeClientMetadata(options),\n    compression: compressors\n  };\n  var credentials = authContext.credentials;\n\n  if (credentials) {\n    if (credentials.mechanism.match(/DEFAULT/i) && credentials.username) {\n      Object.assign(handshakeDoc, {\n        saslSupportedMechs: \"\".concat(credentials.source, \".\").concat(credentials.username)\n      });\n      AUTH_PROVIDERS['scram-sha-256'].prepare(handshakeDoc, authContext, callback);\n      return;\n    }\n\n    var authProvider = AUTH_PROVIDERS[credentials.mechanism];\n    authProvider.prepare(handshakeDoc, authContext, callback);\n    return;\n  }\n\n  callback(undefined, handshakeDoc);\n}\n\nvar LEGAL_SSL_SOCKET_OPTIONS = ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'NPNProtocols', 'ALPNProtocols', 'servername', 'ecdhCurve', 'secureProtocol', 'secureContext', 'session', 'minDHSize', 'crl', 'rejectUnauthorized'];\n\nfunction parseConnectOptions(family, options) {\n  var host = typeof options.host === 'string' ? options.host : 'localhost';\n\n  if (host.indexOf('/') !== -1) {\n    return {\n      path: host\n    };\n  }\n\n  var result = {\n    family: family,\n    host: host,\n    port: typeof options.port === 'number' ? options.port : 27017,\n    rejectUnauthorized: false\n  };\n  return result;\n}\n\nfunction parseSslOptions(family, options) {\n  var result = parseConnectOptions(family, options); // Merge in valid SSL options\n\n  for (var name in options) {\n    if (options[name] != null && LEGAL_SSL_SOCKET_OPTIONS.indexOf(name) !== -1) {\n      result[name] = options[name];\n    }\n  } // Override checkServerIdentity behavior\n\n\n  if (options.checkServerIdentity === false) {\n    // Skip the identiy check by retuning undefined as per node documents\n    // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n    result.checkServerIdentity = function () {\n      return undefined;\n    };\n  } else if (typeof options.checkServerIdentity === 'function') {\n    result.checkServerIdentity = options.checkServerIdentity;\n  } // Set default sni servername to be the same as host\n\n\n  if (result.servername == null) {\n    result.servername = result.host;\n  }\n\n  return result;\n}\n\nvar SOCKET_ERROR_EVENTS = new Set(['error', 'close', 'timeout', 'parseError']);\n\nfunction makeConnection(family, options, cancellationToken, _callback) {\n  var useSsl = typeof options.ssl === 'boolean' ? options.ssl : false;\n  var keepAlive = typeof options.keepAlive === 'boolean' ? options.keepAlive : true;\n  var keepAliveInitialDelay = typeof options.keepAliveInitialDelay === 'number' ? options.keepAliveInitialDelay : 120000;\n  var noDelay = typeof options.noDelay === 'boolean' ? options.noDelay : true;\n  var connectionTimeout = typeof options.connectionTimeout === 'number' ? options.connectionTimeout : typeof options.connectTimeoutMS === 'number' ? options.connectTimeoutMS : 30000;\n  var socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n  var rejectUnauthorized = typeof options.rejectUnauthorized === 'boolean' ? options.rejectUnauthorized : true;\n\n  if (keepAliveInitialDelay > socketTimeout) {\n    keepAliveInitialDelay = Math.round(socketTimeout / 2);\n  }\n\n  var socket;\n\n  var callback = function callback(err, ret) {\n    if (err && socket) {\n      socket.destroy();\n    }\n\n    _callback(err, ret);\n  };\n\n  try {\n    if (useSsl) {\n      socket = tls.connect(parseSslOptions(family, options));\n\n      if (typeof socket.disableRenegotiation === 'function') {\n        socket.disableRenegotiation();\n      }\n    } else {\n      socket = net.createConnection(parseConnectOptions(family, options));\n    }\n  } catch (err) {\n    return callback(err);\n  }\n\n  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);\n  socket.setTimeout(connectionTimeout);\n  socket.setNoDelay(noDelay);\n  var connectEvent = useSsl ? 'secureConnect' : 'connect';\n  var cancellationHandler;\n\n  function errorHandler(eventName) {\n    return function (err) {\n      SOCKET_ERROR_EVENTS.forEach(function (event) {\n        return socket.removeAllListeners(event);\n      });\n\n      if (cancellationHandler) {\n        cancellationToken.removeListener('cancel', cancellationHandler);\n      }\n\n      socket.removeListener(connectEvent, connectHandler);\n      callback(connectionFailureError(eventName, err));\n    };\n  }\n\n  function connectHandler() {\n    SOCKET_ERROR_EVENTS.forEach(function (event) {\n      return socket.removeAllListeners(event);\n    });\n\n    if (cancellationHandler) {\n      cancellationToken.removeListener('cancel', cancellationHandler);\n    }\n\n    if (socket.authorizationError && rejectUnauthorized) {\n      return callback(socket.authorizationError);\n    }\n\n    socket.setTimeout(socketTimeout);\n    callback(null, socket);\n  }\n\n  SOCKET_ERROR_EVENTS.forEach(function (event) {\n    return socket.once(event, errorHandler(event));\n  });\n\n  if (cancellationToken) {\n    cancellationHandler = errorHandler('cancel');\n    cancellationToken.once('cancel', cancellationHandler);\n  }\n\n  socket.once(connectEvent, connectHandler);\n}\n\nfunction connectionFailureError(type, err) {\n  switch (type) {\n    case 'error':\n      return new MongoNetworkError(err);\n\n    case 'timeout':\n      return new MongoNetworkTimeoutError(\"connection timed out\");\n\n    case 'close':\n      return new MongoNetworkError(\"connection closed\");\n\n    case 'cancel':\n      return new MongoNetworkError(\"connection establishment was cancelled\");\n\n    default:\n      return new MongoNetworkError(\"unknown network error\");\n  }\n}\n\nmodule.exports = connect;","map":null,"metadata":{},"sourceType":"script"}