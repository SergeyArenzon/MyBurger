{"ast":null,"code":"import _slicedToArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/sergey/Dev/MyBurger/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sergey/Dev/MyBurger/client/src/components/Burger/Burger.js\";\n\nimport React, { useEffect, useRef, useCallback, useState } from \"react\";\nimport classes from \"./Burger.module.css\";\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\"; // This is custom effect that calls onResize when page load and on window resize\n\nvar useResizeEffect = function useResizeEffect(onResize) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  useEffect(function () {\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n    return function () {\n      return window.removeEventListener(\"resize\", onResize);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [].concat(_toConsumableArray(deps), [onResize]));\n};\n\nvar burger = function burger(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isScrollable = _useState2[0],\n      setIsScrollable = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      container = _useState4[0],\n      setContainer = _useState4[1]; // this has to be done by ref so when window event resize listener will trigger - we will get the current element\n\n\n  var containerRef = useRef(container);\n  containerRef.current = container;\n  var setScrollableOnResize = useCallback(function () {\n    if (!containerRef.current) return;\n    var _containerRef$current = containerRef.current,\n        clientWidth = _containerRef$current.clientWidth,\n        scrollWidth = _containerRef$current.scrollWidth;\n    setIsScrollable(scrollWidth > clientWidth);\n  }, [containerRef]);\n  useResizeEffect(setScrollableOnResize, [containerRef]);\n  if (isScrollable) alert();\n  var transformedIngredients = Object.keys(props.ingredients).map(function (igKey) {\n    return _toConsumableArray(Array(props.ingredients[igKey])).map(function (_, i) {\n      return /*#__PURE__*/React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 24\n        }\n      });\n    });\n  }).reduce(function (arr, el) {\n    return arr.concat(el);\n  }, []);\n  var addIngsText = /*#__PURE__*/React.createElement(\"h2\", {\n    className: classes.AddIngsText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Add Ingredients\");\n  /* Fixes scrolling after too many ingredients added */\n\n  var Burger = classes.Burger;\n\n  if (transformedIngredients.length > 6) {\n    Burger = classes.BurgerScrolled;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: Burger,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), transformedIngredients.length < 1 ? addIngsText : null, transformedIngredients, /*#__PURE__*/React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["/home/sergey/Dev/MyBurger/client/src/components/Burger/Burger.js"],"names":["React","useEffect","useRef","useCallback","useState","classes","BurgerIngredient","useResizeEffect","onResize","deps","window","addEventListener","removeEventListener","burger","props","isScrollable","setIsScrollable","container","setContainer","containerRef","current","setScrollableOnResize","clientWidth","scrollWidth","alert","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","addIngsText","AddIngsText","Burger","length","BurgerScrolled"],"mappings":"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","sourcesContent":["import React,{useEffect, useRef, useCallback, useState} from \"react\";\nimport classes from \"./Burger.module.css\";\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\";\n\n\n// This is custom effect that calls onResize when page load and on window resize\nconst useResizeEffect = (onResize, deps = []) => {\n  useEffect(() => {\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n\n    return () => window.removeEventListener(\"resize\", onResize);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, onResize]);\n};\n\n\n\nconst burger = (props) => {\n\n  const [isScrollable, setIsScrollable] = useState(false);\n  const [container, setContainer] = useState(null);\n  // this has to be done by ref so when window event resize listener will trigger - we will get the current element\n  const containerRef = useRef(container);\n  containerRef.current = container;\n  const setScrollableOnResize = useCallback(() => {\n    if (!containerRef.current) return;\n    const { clientWidth, scrollWidth } = containerRef.current;\n    setIsScrollable(scrollWidth > clientWidth);\n  }, [containerRef]);\n  useResizeEffect(setScrollableOnResize, [containerRef]);\n\n\n  if(isScrollable) alert()\n\n    let transformedIngredients = Object.keys(props.ingredients)\n        .map((igKey) => {\n            return [...Array(props.ingredients[igKey])].map((_, i) => {\n                return <BurgerIngredient key={igKey + i} type={igKey} />;\n            });\n        })\n        .reduce((arr, el) => {\n            return arr.concat(el);\n        }, []);\n    const addIngsText = (\n        <h2 className={classes.AddIngsText}>Add Ingredients</h2>\n    );\n\n    /* Fixes scrolling after too many ingredients added */\n    let Burger = classes.Burger;\n    if (transformedIngredients.length > 6) {\n        Burger = classes.BurgerScrolled;\n    }\n\n    return (\n        <div className={Burger}>\n            <BurgerIngredient type=\"bread-top\" />\n            {transformedIngredients.length < 1 ? addIngsText : null}\n            {transformedIngredients}\n            <BurgerIngredient type=\"bread-bottom\" />\n        </div>\n    );\n};\n\nexport default burger;\n"]},"metadata":{},"sourceType":"module"}