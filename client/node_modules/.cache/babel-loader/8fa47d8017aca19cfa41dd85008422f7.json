{"ast":null,"code":"import _objectSpread from \"/home/sergey/Dev/Web/myburger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// import * as actionTypes from \"./actionTypes\";\n// import axios from \"axios\";\n// export const authStart = () => {\n//     return {\n//         type: actionTypes.AUTH_START,\n//     };\n// };\n// export const authSuccess = (idToken, userId) => {\n//     return {\n//         type: actionTypes.AUTH_SUCCESS,\n//         token: idToken,\n//         userId: userId,\n//     };\n// };\n// export const authFail = (error) => {\n//     return {\n//         type: actionTypes.AUTH_FAIL,\n//         error: error,\n//     };\n// };\n// export const logout = () => {\n//     return {\n//         type: actionTypes.AUTH_LOGOUT,\n//     };\n// };\n// export const checkAuthTimeout = (expirationTime) => {\n//     return (dispatch) => {\n//         setTimeout(() => {\n//             dispatch(logout());\n//         }, expirationTime * 1000);\n//     };\n// };\n// export const auth = (email, password, isSignup) => {\n//     return (dispatch) => {\n//         dispatch(authStart());\n//         const authData = {\n//             email: email,\n//             password: password,\n//             returnSecureToken: true,\n//         };\n//         let url =\n//             \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         if (!isSignup) {\n//             url =\n//                 \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         }\n//         axios\n//             .post(url, authData)\n//             .then((response) => {\n//                 console.log(response);\n//                 dispatch(\n//                     authSuccess(response.data.idToken, response.data.localId)\n//                 );\n//                 dispatch(checkAuthTimeout(response.data.expiresIn));\n//             })\n//             .catch((err) => {\n//                 console.log(err.response);\n//                 dispatch(authFail(err.response));\n//             });\n//     };\n// };\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport { returnErrors } from \"./error\";\nexport var login = function login(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    var body = JSON.stringify({\n      email: email,\n      password: password\n    });\n    axios.post(\"http://localhost:5000/auth\", body, config).then(function (res) {\n      var fixedData = _objectSpread({}, res.data, {\n        _id: res.data.user.id\n      });\n\n      delete fixedData['id'];\n      dispatch({\n        type: actionTypes.LOGIN_SUCCESS,\n        payload: fixedData\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: actionTypes.LOGIN_FAIL\n      });\n    });\n  };\n};\nexport var register = function register(_ref2) {\n  var name = _ref2.name,\n      email = _ref2.email,\n      password = _ref2.password;\n  return function (dispatch) {\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    var body = JSON.stringify({\n      name: name,\n      email: email,\n      password: password\n    });\n    axios.post(\"http://localhost:5000/users/add\", body, config).then(function (res) {\n      return dispatch({\n        type: actionTypes.REGISTER_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n      dispatch({\n        type: actionTypes.REGISTER_FAIL\n      });\n    });\n  };\n};\nexport var logout = function logout() {\n  return {\n    type: actionTypes.LOGOUT_SUCCESS\n  };\n}; // Check token & load user\n\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    // User loading\n    dispatch({\n      type: actionTypes.USER_LOADING\n    });\n    axios.get(\"http://localhost:5000/auth/user\", tokenConfig(getState)).then(function (res) {\n      dispatch({\n        type: actionTypes.USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: actionTypes.AUTH_ERROR\n      });\n    });\n  };\n}; // Setup config/headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // Get token from loaclStorage\n  var token = getState().auth.token; // Header\n\n  var config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/sergey/Dev/Web/myburger/src/store/actions/auth.js"],"names":["actionTypes","axios","returnErrors","login","email","password","dispatch","config","headers","body","JSON","stringify","post","then","res","fixedData","data","_id","user","id","type","LOGIN_SUCCESS","payload","catch","err","response","status","LOGIN_FAIL","register","name","REGISTER_SUCCESS","REGISTER_FAIL","logout","LOGOUT_SUCCESS","loadUser","getState","USER_LOADING","get","tokenConfig","USER_LOADED","AUTH_ERROR","token","auth"],"mappings":"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","sourcesContent":["// import * as actionTypes from \"./actionTypes\";\n// import axios from \"axios\";\n\n// export const authStart = () => {\n//     return {\n//         type: actionTypes.AUTH_START,\n//     };\n// };\n\n// export const authSuccess = (idToken, userId) => {\n//     return {\n//         type: actionTypes.AUTH_SUCCESS,\n//         token: idToken,\n//         userId: userId,\n//     };\n// };\n\n// export const authFail = (error) => {\n//     return {\n//         type: actionTypes.AUTH_FAIL,\n//         error: error,\n//     };\n// };\n\n// export const logout = () => {\n//     return {\n//         type: actionTypes.AUTH_LOGOUT,\n//     };\n// };\n\n// export const checkAuthTimeout = (expirationTime) => {\n//     return (dispatch) => {\n//         setTimeout(() => {\n//             dispatch(logout());\n//         }, expirationTime * 1000);\n//     };\n// };\n\n// export const auth = (email, password, isSignup) => {\n//     return (dispatch) => {\n//         dispatch(authStart());\n//         const authData = {\n//             email: email,\n//             password: password,\n//             returnSecureToken: true,\n//         };\n//         let url =\n//             \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         if (!isSignup) {\n//             url =\n//                 \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAFFfCTRipxD7F1H5c2T0TtG34d16RZbrQ\";\n//         }\n//         axios\n//             .post(url, authData)\n//             .then((response) => {\n//                 console.log(response);\n//                 dispatch(\n//                     authSuccess(response.data.idToken, response.data.localId)\n//                 );\n//                 dispatch(checkAuthTimeout(response.data.expiresIn));\n//             })\n//             .catch((err) => {\n//                 console.log(err.response);\n//                 dispatch(authFail(err.response));\n//             });\n//     };\n// };\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport { returnErrors } from \"./error\";\n\n\nexport const login = ({ email, password }) => (dispatch) => {\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n\n    const body = JSON.stringify({ email, password });\n    axios\n        .post(\"http://localhost:5000/auth\", body, config)\n        .then((res) => {\n\n            const fixedData = {\n                ...res.data,\n                _id: res.data.user.id\n            }\n\n            delete fixedData['id'];\n\n            dispatch({\n                type: actionTypes.LOGIN_SUCCESS,\n                payload: fixedData,\n            });\n        })\n        .catch((err) => {\n            dispatch(\n                returnErrors(\n                    err.response.data,\n                    err.response.status,\n                    \"LOGIN_FAIL\"\n                )\n            );\n            dispatch({\n                type: actionTypes.LOGIN_FAIL,\n            });\n        });\n};\n\nexport const register = ({ name, email, password }) => (dispatch) => {\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n\n    const body = JSON.stringify({ name, email, password });\n    axios\n        .post(\"http://localhost:5000/users/add\", body, config)\n        .then((res) =>\n            dispatch({\n                type: actionTypes.REGISTER_SUCCESS,\n                payload: res.data,\n            })\n        )\n        .catch((err) => {\n            dispatch(\n                returnErrors(\n                    err.response.data,\n                    err.response.status,\n                    \"REGISTER_FAIL\"\n                )\n            );\n            dispatch({\n                type: actionTypes.REGISTER_FAIL,\n            });\n        });\n};\n\nexport const logout = () => {\n    return {\n        type: actionTypes.LOGOUT_SUCCESS,\n    };\n};\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: actionTypes.USER_LOADING });\n\n    axios\n        .get(\"http://localhost:5000/auth/user\", tokenConfig(getState))\n        .then((res) => {\n            dispatch({\n                type: actionTypes.USER_LOADED,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({ type: actionTypes.AUTH_ERROR });\n        });\n};\n\n// Setup config/headers and token\n\nexport const tokenConfig = (getState) => {\n    // Get token from loaclStorage\n    const token = getState().auth.token;\n\n    // Header\n\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\",\n        },\n    };\n    if (token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n    return config;\n};\n"]},"metadata":{},"sourceType":"module"}